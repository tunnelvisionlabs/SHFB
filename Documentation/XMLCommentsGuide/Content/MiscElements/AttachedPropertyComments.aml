<?xml version="1.0" encoding="utf-8"?>
<topic id="c0346d23-f376-4948-8f9a-d17b2f1acef3" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>This element is used to define the content that should appear on the auto-generated attached property
member topic for a given WPF dependency property member.</para>
		</introduction>

		<section>
			<title>Syntax</title>
			<content>
				<para>This top-level element is valid on any dependency property member.  The member on which the element
appears should have its own set of member-specific XML comments as well.</para>

<code language="xml" title=" ">
&lt;AttachedPropertyComments&gt;
  &lt;summary&gt;
  Summary description
  &lt;/summary&gt;
  [&lt;remarks&gt;Optional remarks&lt;/remarks&gt;]
  [&lt;example&gt;Optional examples&lt;/example&gt;]
  [... other top-level comments elements as needed ...]
&lt;/AttachedPropertyComments&gt;
</code>

				<para>Include any top-level XML comments elements as you would on a standard member.  These elements will
be formatted in an identical fashion and will appear in the auto-generated attached property member topic.</para>

				<alert class="note">
					<para>This is a custom XML comments element implemented by the <token>SHFB</token>.  It will not appear
in the list of valid elements for XML comments IntelliSense.</para>
				</alert>
			
			</content>
		</section>

		<section address="Remarks">
			<title>Remarks</title>
			<content>
				<para>Because the attached property and attached event members of WPF classes are compiler-generated,
there is no way to associate XML comments with them directly without managing a standalone XML comments file.
While it is possible to do this, it is less convenient than keeping the comments in the code.  The help file
builder provides a solution to this through its <application>GenerateInheritedDocs</application> tool.  As part
of the process of generating inherited documentation, the tool will look for attached property and attached event
fields.  If it finds them, it will automatically inherit their comments for the related compiler-generated
members as default comments to prevent a "missing comments" warning.</para>

				<para>In addition, if it finds comments for those field members, it will check for an
<codeInline>AttachedPropertyComments</codeInline> element (for attached properties) or an
<codeInline>AttachedEventComments</codeInline> element (for attached events) and, if found, will use the XML
comments nested within those elements for the related compiler-generated members.  This allows you to provide
comments for the field member and the related compiler-generated member that are entirely different but are
managed from within the code.</para>

				<alert class="note">
					<para>Because the attached property and event members are compiler-generated, you must fully qualify
their names if you want to create a link to them with a <codeInline>see</codeInline> element as shown in the
example below.</para>
				</alert>

			</content>
		</section>

		<section>
			<title>Example</title>
			<content>
<code language="cs" title=" " source="DocumentationInheritance\AttachedEventsAndProperties.cs"
	region="IsBroughtIntoViewWhenSelected attached property" />
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="9341fdc8-1571-405c-8e61-6a6b9b601b46" />
			<codeEntityReference qualifyHint="false" autoUpgrade="true">P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected</codeEntityReference>
			<codeEntityReference qualifyHint="false">F:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelectedProperty</codeEntityReference>
		</relatedTopics>
	</developerConceptualDocument>
</topic>
