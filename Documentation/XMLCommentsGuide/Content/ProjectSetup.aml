<?xml version="1.0" encoding="utf-8"?>
<topic id="57C91630-95D6-4E3E-AF24-3415CC569AC8" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This walkthrough will describe the steps needed to enable XML comments file output in your Visual
Studio projects, provides information on where to get more information on using XML comments to decorate your
code, and describes how to open help file builder projects from within Visual Studio.</para>

	<autoOutline lead="none" excludeRelatedTopics="true" />
    </introduction>

    <section address="Setup">
      <title>Enabling XML Comments File Generation</title>
      <content>
				<para>In order to create a help file that contains reference content (API documentation), you must enable
XML comments in your Visual Studio projects so that an XML file is generated to contain them when the project is
built.</para>

				<alert class="tip">
					<para>If not using the Visual Studio IDE, the various managed language compilers support a
<replaceable>/doc</replaceable> command line option that will produce the XML comments file.  See your language
compiler command line option documentation for details.</para>
	  </alert>

        <procedure>
          <title>All Projects Except Managed C++ Projects</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In the Solution Explorer, right click on the project and select <ui>Properties</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Select the <ui>Build</ui> property page.</para>

								<alert class="note">
									<para>The XML comments filename is a configuration option.  As such, you can either select the
<ui>All Configurations</ui> option at the top of the page to set the XML comments options for all configurations
at the same time or select each configuration individually and repeat the next steps for each one.</para>
								</alert>
              </content>
            </step>
            <step>
              <content>
                <para>In the <ui>Output</ui> section, check the checkbox next to the <ui>Xml documentation file</ui>
text box and specify a name for the XML file.  Although not required, a common convention is to name the XML
comments file after the related assembly (except with a <localUri>.xml</localUri> extension).  The assembly name
can be found on the <ui>Application</ui> property page.</para>
              </content>
            </step>
            <step>
              <content>
                <para>If you have a solution with multiple projects that need to be documented, repeat the above
steps for each project in the solution.  It is recommended that you give each project's XML comments file a
unique name.</para>
              </content>
            </step>
          </steps>
        </procedure>

				<para>If documenting a managed C++ project, the procedure differs and you need to follow these steps
instead.</para>
				
        <procedure>
          <title>Managed C++ Projects</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In the Solution Explorer, right click on the project and select <ui>Properties</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Expand the <ui>Configuration Properties</ui> category and then expand the <ui>C/C++</ui>
sub-category and select the <ui>Output Files</ui> option below it.</para>

								<alert class="note">
									<para>The XML comments file option is a configuration option.  As such, you can either select
the <ui>All Configurations</ui> option at the top of the dialog box to set the XML comments options for all
configurations at the same time or select each configuration individually and repeat the next step for each
one.</para>
								</alert>
              </content>
            </step>
            <step>
              <content>
                <para>In the <ui>Output Files</ui> options, change the <ui>Generate XML Documentation Files</ui>
option to <userInput>Yes (/doc)</userInput>.</para>
              </content>
            </step>
            <step>
              <content>
              	<para>By default, the comments file is named after the project target with a <localUri>.xml</localUri>
extension and is placed in the target folder.  If you want to change the name, select the <ui>XML Document Generator</ui>
category below the <ui>Configuration Properties</ui> category and change the filename using the <ui>Output
Document File</ui> property.</para>
              </content>
            </step>
            <step>
              <content>
                <para>If you have a solution with multiple projects that need to be documented, repeat the above
steps for each project in the solution.  If you explicitly specify a name for the comments file, it is
recommended that you give each project's XML comments file a unique name.</para>
              </content>
            </step>
          </steps>
      	  <conclusion>
						<content>
							<para>Once the above has been done, Visual Studio will create the XML comments file each time the
project is built.</para>
						</content>							
					</conclusion>
        </procedure>
      </content>
    </section>

    <section address="DecorateCode">
      <title>Decorating Your Code</title>
			<content>
				<para>In addition to setting the project option to create the file, you must also add XML comments to
your source code.  At a minimum, you should add a <codeInline>&lt;summary&gt;</codeInline> element to each public
type and to the public and protected members of those types.  There are many other elements available that will
help improve the quality of your documentation.  See the other sections in this guide for more information</para>

				<para>The XML comments elements and their format is consistent across all languages.  The only variable
is the comment characters that precede them.  Here are some examples.</para>

<code language="cs" title="C#, C++, and F#">
/// &lt;summary&gt;
/// This is an example of triple slash XML comments.  This is the most common
/// form of XML comments delimiter in C#, C++, and F# code.
/// &lt;/summary&gt;

NOTE: The multi-line XML comments delimiters shown below are only supported by C# and C++.

/** &lt;summary&gt;
  * This is an example of using the multi-line XML comments delimiters.  In this
  * case, the common pattern "  * " at the start of each line after the first one
  * is ignored by the compiler and will not appear in the comments.
  * &lt;/summary&gt;
  */

/**
&lt;summary&gt;This example does not use a common leading pattern on each line of
the summary comments using the multi-line XML comments delimiters.&lt;/summary&gt;
*/

/** &lt;summary&gt;A single-line summary using the multi-line delimiters.&lt;/summary&gt; */

</code>

<code language="vb">
''' &lt;summary&gt;
''' This is an example of triple apostrophe XML comments.  These are the only
''' delimiters supported by Visual Basic.
''' &lt;/summary&gt;
</code>
				
		</content>
	</section>

    <nextSteps>
    	<content>
				<para>Refer to the other sections in this guide for more information about the various XML comments
elements and how to use them.</para></content>
    </nextSteps>

    <relatedTopics>
			<link xlink:href="4268757F-CE8D-4E6D-8502-4F7F2E22DDA3" />
			<link xlink:href="515d5a54-5047-4d6f-bf51-d47c7c699cc2" />
			<link xlink:href="BD91FAD4-188D-4697-A654-7C07FD47EF31" />
			<link xlink:href="20dc8c5f-9979-4ecd-92ce-cea6ce7acaeb" />
			<link xlink:href="f8464c0f-f62a-4faf-b11a-9a41173307e8" />
			<link xlink:href="d297bc14-33aa-4152-ae36-9f658b15de87" />
			<link xlink:href="9341fdc8-1571-405c-8e61-6a6b9b601b46" />
    </relatedTopics>
  </developerWalkthroughDocument>

</topic>
