<?xml version="1.0" encoding="utf-8"?>
<topic id="ee5d612e-914f-411f-bd95-23478b15e4de" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>All <codeInline>cref</codeInline> attributes on documentation elements such as <codeInline>see</codeInline>
or <codeInline>exception</codeInline> generate an ID string in the XML comments file.  Normally, the ID string
can be properly generated by the compiler based on a partial or fully qualified type or member name.  However,
there are occasions where this will not work properly.  A common example is in C++ code where the compiler is not
always able to generate IDs for forward referenced members.  In such cases, an ID string can be used as a
reference explicitly instead of letting the compiler figure it out.</para>

			<alert class="note">
				<para>Author Credit: Most of the information in this topic was originally written by Microsoft as part
of the .NET Documentation Guidelines document.</para>
			</alert>

		</introduction>

		<section>
			<content>
				<para>The format of the ID string is shown below.</para>

<code language="none" title=" ">
type:fullname[(arglist)]`genericcount
</code>

				<para><codeInline>type</codeInline> is one of the following.  The final two are specific to the
Sandcastle Help File Builder and Tools and are never generated by the compiler.</para>

				<table>
					<tableHeader>
						<row>
							<entry>
								<para>Type</para>
							</entry>
							<entry>
								<para>Description</para>
							</entry>
						</row>
					</tableHeader>
					<row>
						<entry>
							<para>!</para>
						</entry>
						<entry>
							<para>Used by the compiler to indicate an error such as being unable to resolve the member ID</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>N</para>
						</entry>
						<entry>
							<para>Namespace</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>T</para>
						</entry>
						<entry>
							<para>Type (class, interface, structure, enumeration, etc.)</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>F</para>
						</entry>
						<entry>
							<para>Field</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>E</para>
						</entry>
						<entry>
							<para>Event</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>P</para>
						</entry>
						<entry>
							<para>Property</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>M</para>
						</entry>
						<entry>
							<para>Method</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>R</para>
						</entry>
						<entry>
							<para>Sandcastle generated.  Represents the root namespace page.  There will always be a single
entry named R:Project_[HtmlHelpName] where "[HtmlHelpName]" is the value of your project's HTML Help Name
property with spaces replaced by underscores.  This suffix is required to keep the root namespace container page
ID unique across all help files so that there are no duplicate IDs when generating MS Help Viewer output.</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>O</para>
						</entry>
						<entry>
							<para>Sandcastle specific.  Used to generate a link to the Overloads List page for an overloaded
member.</para>
						</entry>
					</row>
				</table>

				<para><codeInline>fullname</codeInline> is the full name of the member from the root.  Thus referencing
<codeInline>StringBuilder</codeInline> would be <codeInline>System.Text.StringBuilder</codeInline>.  The full
name will include any member references as well so referencing the <codeInline>Append</codeInline> method of
<codeInline>StringBuilder</codeInline> would be <codeInline>System.Text.StringBuilder.Append</codeInline>.</para>

				<para>For properties that accept parameters and methods with parameters, the argument list is next.  The
argument list contains the parentheses as well.  Each argument is specified as the full name of the associated
type.  For reference types, the type name is followed by an at (@) sign.  For array types, the type name is
followed by brackets ([]).  Other symbols are possible but they are not supported by Visual Basic or C#.</para>

				<para>For generic classes, the type is followed by a back tick (`) and the number of generic type
parameters.  For generic methods, there is one back tick (`) and a number for each generic parameter.  Additional
generic parameters are separated by a comma.  Each number is the zero-based index within the parameter list of
the parameter.</para>

				<para>There are no spaces allowed in the ID string.  If a name contains a dot (except to separate
namespaces from types, types from other types, and types from members) then the pound (#) sign is used instead.
In general, such a member is not possible. However, for referencing special methods like a constructor or
explicitly implemented members, it is needed.  An example of an explicitly implemented member ID is:</para>

<code language="none" title=" ">
M:TestNamespace.TestClass.System#Collections#IEnumerable#GetEnumerator
</code>
				<para>The constructor for a type is always of the following form.</para>

<code language="none" title=" ">
M:fullname.#ctor[(arglist)]
</code>

				<para>The destructor for a class is always of the following form.</para>

<code language="none" title=" ">
M:fullname.Finalize
</code>

				<para>Operators are encoded as the formal name of the operator.  Refer to the C# documentation for the
formal name of all operators.  For conversion operators, the formal name is used (<codeInline>op_explicit</codeInline>
or <codeInline>op_implicit</codeInline>) followed by a tilde (~) and the return type as follows.</para>

<code language="none" title=" ">
M:fullname.op_explicit(arglist)~returntype
</code>
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="57C91630-95D6-4E3E-AF24-3415CC569AC8" />
			<link xlink:href="515d5a54-5047-4d6f-bf51-d47c7c699cc2" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
