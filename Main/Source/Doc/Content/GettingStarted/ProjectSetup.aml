<?xml version="1.0" encoding="utf-8"?>
<topic id="c47d9242-b3a8-4153-aa9e-ae8cb41cefe2" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This walkthrough will describe the steps needed to enable XML
comments file output in your Visual Studio projects, provides information on
where to get more information on using XML comments to decorate your code, and
describes how to open help file builder projects from within Visual Studio.</para>

	<autoOutline lead="none" />
    </introduction>

    <section address="Setup">
      <title>Enabling XML Comments File Generation</title>
      <content><para>In order to create a help file that contains reference
content (API documentation), you must enable XML comments in your Visual Studio
projects so that an XML file is generated to contain them when the project is
built.</para>

	  <alert class="note">
		<para>If you are trying to document a website project, see the
<link xlink:href="94c7f744-9b90-4254-93ab-9b15f47d9f42" /> topic for some
necessary information as they are unlike other Visual Studio projects and
require additional steps in order to generate XML comments files.</para>
	  </alert>

	  <alert class="tip">
  		<para>If not using the Visual Studio IDE, the various managed language
compilers support a <replaceable>/doc</replaceable> command line option that
will produce the XML comments file.  See your language compiler command line
option documentation for details.</para>
	  </alert>

        <procedure>
          <title>All Projects Except Managed C++ Projects</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In the Solution Explorer, right click on the project and
select <ui>Properties</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Select the <ui>Build</ui> property page.</para>
<alert class="note">
  <para>The XML comments filename is a configuration option.  As such, you can
either select the <ui>All Configurations</ui> option at the top of the page to
set the XML comments options for all configurations at the same time or select
each configuration individually and repeat the next steps for each one.</para>
</alert>
              </content>
            </step>
            <step>
              <content>
                <para>In the <ui>Output</ui> section, check the checkbox next
to the <ui>Xml documentation file</ui>  text box and specify a name for the XML
file.  Although not required, a common convention is to name the XML comments
file after the related assembly (except with a <localUri>.xml</localUri>
extension).  The assembly name can be found on the <ui>Application</ui>
property page.</para>
              </content>
            </step>
            <step>
              <content>
                <para>If you have a solution with multiple projects that need
to be documented, repeat the above steps for each project in the solution.  It
is recommended that you give each project's XML comments file a unique name.</para>
              </content>
            </step>
          </steps>
        </procedure>
        
		<para>If documenting a managed C++ project, the procedure differs and
you need to follow these steps instead.</para>

        <procedure>
          <title>Managed C++ Projects</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In the Solution Explorer, right click on the project and
select <ui>Properties</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Expand the <ui>Configuration Properties</ui> category
and then expand the <ui>C/C++</ui> sub-category and select the <ui>Output
Files</ui> option below it.</para>

<alert class="note">
  <para>The XML comments file option is a configuration option.  As such, you
can either select the <ui>All Configurations</ui> option at the top of the
dialog box to set the XML comments options for all configurations at the same
time or select each configuration individually and repeat the next step for
each one.</para>
</alert>
              </content>
            </step>
            <step>
              <content>
                <para>In the <ui>Output Files</ui> options, change the
<ui>Generate XML Documentation Files</ui> option to
<userInput>Yes (/doc)</userInput>.</para>
              </content>
            </step>
            <step>
              <content>
              	<para>By default, the comments file is named after the project
target with a <localUri>.xml</localUri> extension and is placed in the target
folder.  If you want to change the name, select the <ui>XML Document Generator</ui>
category below the <ui>Configuration Properties</ui> category and change the
filename using the <ui>Output Document File</ui> property.</para>
              </content>
            </step>
            <step>
              <content>
                <para>If you have a solution with multiple projects that need
to be documented, repeat the above steps for each project in the solution.  If
you explicitly specify a name for the comments file, it is recommended that you
give each project's XML comments file a unique name.</para>
              </content>
            </step>
          </steps>
      	  <conclusion><para>Once the above has been done, Visual Studio will
create the XML comments file each time the project is built.</para>
		  </conclusion>
        </procedure>
      </content>
    </section>

    <section address="DecorateCode">
      <title>Decorating Your Code</title>
		<content><para>In addition to setting the project option to create the
file, you must also add XML comments to your source code.  At a minimum, you
should add a <codeInline>&lt;summary&gt;</codeInline> tag to each public type
and to the public and protected members of those types.  There are many other
tags available that will help improve the quality of your documentation.</para>

	<para>For a comprehensive list of XML documentation tags and a description
of their attributes and usage you can download the <externalLink>
  <linkText>XML Documentation Comments Guide</linkText>
  <linkUri>http://www.dynicity.com/Products/XMLDocComments.aspx</linkUri>
  <linkTarget>_blank</linkTarget>
</externalLink>.  Basic information on XML comments and how to use them can
also be found at either <externalLink><linkText>XML Documentation Comments
(C# Programming Guide)</linkText>
  <linkUri>http://msdn.microsoft.com/en-us/library/b2s063f7.aspx?ppud=4</linkUri>
  <linkTarget>_blank</linkTarget>
</externalLink> or <externalLink><linkText>Documenting Your Code with XML
(Visual Basic)</linkText>
  <linkUri>http://msdn.microsoft.com/en-us/library/ms172652.aspx</linkUri>
  <linkTarget>_blank</linkTarget></externalLink>.</para>

<para>Although it is not mentioned in the XML tag documentation, you can use
HTML markup within your XML comments to provide additional formatting, embed
images, etc.  See the
<link xlink:href="1aea789d-b226-4b39-b534-4c97c256fac8#HtmlTags">FAQ</link> for
more information.</para>
		</content>
	</section>

	<section address="OpenSHFB">
  	  <title>Setting Up Visual Studio to Open a Help File Builder Project File</title>
  	  <content><para>Although it uses an MSBuild project file format, a
help file builder project cannot be opened and used directly from within Visual
Studio like a normal project.  This will require a Visual Studio package that
provides such support (one is planned for a future release).  In the meantime,
a help file builder project can be added to the solution file so that it can be
checked into source control and opened from within Visual Studio by launching
the standalone GUI.  You can add it as a solution item by right clicking on the
solution name in the <ui>Solution Explorer</ui>, selecting <ui>Add | Existing
Item</ui>, and then selecting the help file builder project.  It is then added
to a <ui>Solution Items</ui> folder in your solution.</para>

	<para>The <localUri>.shfbproj</localUri> file extension is registered to be
opened with the help file builder's standalone GUI when installed.  As such,
double-clicking the project file in the solution should open it using the
standalone GUI automatically.  If this does not happen, you can have Visual
Studio open the help file builder project using the GUI rather than its default
text editor by doing the following:  Right click on the help file builder
project and select <ui>Open With...</ui>. Click <ui>Add</ui> to add a new
program to the list.  Enter the path to <localUri>SandcastleBuilderGUI.exe</localUri>
for your system and enter something like "Sandcastle Help File Builder" for the
friendly name.  Click <ui>OK</ui> to save it, and then click <ui>Set as Default</ui>
to make it the default tool for opening the help file builder projects.  Click
<ui>OK</ui> to save it. Now, whenever you double-click the help file builder
project, it will open in the standalone GUI automatically.</para>
  </content>
</section>

    <nextSteps>
    	<content><para>Now that you have enabled XML comments in your project
and added some comments to your code, you are ready to
<link xlink:href="d5dbf017-25f1-48cb-86db-90f76ee8f4d7">create your first
help file builder project</link>.</para></content>
    </nextSteps>

    <relatedTopics>
    <link xlink:href="b772e00e-1705-4062-adb6-774826ce6700" />
	<link xlink:href="8c0c97d0-c968-4c15-9fe9-e8f3a443c50a" />
	<link xlink:href="8e3f8757-0ef3-4772-bb2f-5d7ae57e50da" />
	<link xlink:href="d5dbf017-25f1-48cb-86db-90f76ee8f4d7" />
	<link xlink:href="8ffc0d37-0215-4609-b6f8-dba53a6c5063" />
	<link xlink:href="ec822059-b179-4add-984d-485580050ffb" />
	
    <externalLink>
<linkText>Taming Sandcastle: A .NET Programmer's Guide to Documenting Your Code</linkText>
<linkAlternateText>Taming Sandcastle</linkAlternateText>
<linkUri>http://www.simple-talk.com/dotnet/.net-tools/taming-sandcastle-a-.net-programmers-guide-to-documenting-your-code</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>

	<externalLink>
<linkText>Sandcastle Wall Chart</linkText>
<linkAlternateText>Sandcastle Wall Chart</linkAlternateText>
<linkUri>http://www.EWoodruff.us/Downloads/SandcastleWallchart.pdf</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>
	
    </relatedTopics>
  </developerWalkthroughDocument>

</topic>
