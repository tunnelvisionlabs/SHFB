<doc>
  <assembly>
    <name>_InheritedDocs_</name>
  </assembly>
  <members>
  <member name="N:SandcastleTest">
  <summary>
    
            TestDoc namespace comments from the extra comments file!
            <p />Test Namespace.  See <see cref="T:TestDoc.TestClass" /> and <see cref="T:TestDoc.TestDerivedClass">Test Sealed Derived Class</see> for some additional information.
    <p />Test of the &lt;inheritdoc /&gt; tag in namespace comments.  The stuff from the <b>TestDoc</b> namespace should be above this paragraph.</summary>
</member><member name="T:TestDoc.Visitor">
  
  <remarks>Actually, it's a visitor but we inherited the summary
            documentation from the parent class</remarks>
<summary>
            A customer
            </summary><filterpriority>1</filterpriority></member><member name="M:TestDoc.Visitor.TestMethod">
  <summary>
    <para>Paragraph 2</para>
  </summary>
</member><member name="M:TestDoc.Visitor.MyMethod">
  <summary>
    Base class method summary.
    <p />Extra stuff added.</summary>
  <remarks>
    <para>
              My new remarks, including the last paragraph from the remarks
              in the base class:
              </para>
    <para>Info about the base class implementation.</para>
  </remarks>
  <example>
    
        <code lang="cs" title="Test Inherited example">
            /// Here is a code sample
            </code>
      
    <para>Extra example: ... </para>
  </example>
</member><member name="M:TestDoc.ServicedComponentTest.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)">
  
<summary>
                    Obtains certain information about the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class instance.
                </summary><param name="infoMask">
                    A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.
                </param><param name="infoArray">
                    A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.
                </param></member><member name="M:TestDoc.ServicedComponentTest.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)">
  
<summary>
                    Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation.
                </summary><returns>
                    A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.
                </returns><param name="s">
                    A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.
                </param></member><member name="M:TestDoc.ServicedComponentTest.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)">
  
<summary>
                    Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's done bit is set to true after a remote method invocation.
                </summary><returns>
                    A string converted from a response object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.
                </returns><param name="s">
                    A string to be converted into a request object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.
                </param></member><member name="M:SealedOverrideBug.SealedTest.SomeMethod">
  <summary>
            An override in the sealed class.<br /><br />Test <b>break</b><br />Another break.
            </summary>
  
</member><member name="M:IJM.Library.Threading.Windows.BackgroundRunner.Run(System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.EventHandler{IJM.Library.Threading.Windows.DataEventArgs{System.Exception}})">
  
<summary>
            Start de achtergrond bewerking. De functionaliteit in de
            <see cref="T:System.ComponentModel.DoWorkEventHandler" /> zal op een aparte
            thread worden aangeroepen. Wanneer deze klaar is,
            zal de <see cref="T:System.ComponentModel.RunWorkerCompletedEventHandler" /> worden
            aangroepen op de main thread(UI).
            </summary><param name="doWork">Event waarin het werk moet gebeuren.</param><param name="completedEvent">Event dat wordt aangeroepen wanneer
            het werk is gedaan.</param><param name="onError">Event dat wordt aangeroepen wanneer er een fout optreedt.</param></member><member name="M:OverloadsPageBug.MyDialog.Dispose(System.Boolean)">
  
<summary>
                    Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form" />.
                </summary><param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                </param></member><member name="M:DocumentationInheritance.CustomException.#ctor(System.String)">
  
<summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
                </summary><param name="message">
                    The message that describes the error. 
                </param></member><member name="M:DocumentationInheritance.CustomException.#ctor(System.String,System.Exception)">
  
<summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary><param name="message">
                    The error message that explains the reason for the exception. 
                </param><param name="innerException">
                    The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
                </param></member><member name="M:DocumentationInheritance.CustomException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
  
<summary>
                    Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
                </summary><param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
                </param><param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
                </param><exception cref="T:System.ArgumentNullException">
                    The <paramref name="info" /> parameter is null. 
                </exception><exception cref="T:System.Runtime.Serialization.SerializationException">
                    The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). 
                </exception></member><member name="M:IJM.Library.Threading.Windows.SynchronousBackgroundRunner.Run(System.ComponentModel.DoWorkEventHandler,System.ComponentModel.RunWorkerCompletedEventHandler,System.EventHandler{IJM.Library.Threading.Windows.DataEventArgs{System.Exception}})">
  
<summary>
            Start de achtergrond bewerking. De functionaliteit in de
            <see cref="T:System.ComponentModel.DoWorkEventHandler" /> zal op een aparte
            thread worden aangeroepen. Wanneer deze klaar is,
            zal de <see cref="T:System.ComponentModel.RunWorkerCompletedEventHandler" /> worden
            aangroepen op de main thread(UI).
            </summary><param name="doWork">Event waarin het werk moet gebeuren.</param><param name="completedEvent">Event dat wordt aangeroepen wanneer
            het werk is gedaan.</param><param name="onError">Event dat wordt aangeroepen wanneer er een fout optreedt.</param></member><member name="M:DocumentationInheritance.ExplicitImplementation.System#Collections#IEnumerable#GetEnumerator">
  
  <returns>This is a dummy class so it throws an exception</returns>
<summary>
                    Returns an enumerator that iterates through a collection.
                </summary><filterpriority>2</filterpriority></member><member name="M:DocumentationInheritance.ExplicitImplementation.Clone">
  
<summary>
                    Creates a new object that is a copy of the current instance.
                </summary><returns>
                    A new object that is a copy of this instance.
                </returns><filterpriority>2</filterpriority></member><member name="P:DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#SyncRoot">
  
  <remarks>This is a dummy class and always returns null.</remarks>
<summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </summary><returns>
                    An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
                </returns><filterpriority>2</filterpriority></member><member name="M:TestDoc.TestDerivedClass.ToString">
  
<summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary><returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns><filterpriority>2</filterpriority></member><member name="P:IndexTest.IndexTest.PropertyB">
  
</member><member name="M:IJM.Library.Threading.Windows.DataEventArgs`1.ToString">
  
<summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary><returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns><filterpriority>2</filterpriority></member><member name="T:DocumentationInheritance.DerivedClassWithInheritedDocs">
  <summary>
            This is a derived class with inherited documentation.
            </summary>
  <remarks>This will inherit just the last &lt;para&gt; tag from
            the base class's &lt;remarks&gt; tag:
            <para>This information applies to all classes that derive from
            <see cref="T:DocumentationInheritance.BaseInheritDoc" />:
            <list type="bullet"><item><description>Point #1.</description></item><item><description>Point #2.</description></item><item><description>Point #3.</description></item></list></para></remarks>
</member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.ToString">
  
<summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary><returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns><filterpriority>2</filterpriority></member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.OverloadedMethod(System.String,System.String)">
  
  <param name="p2">The second string parameter</param>
<summary>
            This overloaded method does something
            </summary><param name="p1">The string parameter</param></member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.OverloadedMethod(System.String,System.Int32)">
  
  <param name="x">An integer parametr</param>
<param name="p1">The string parameter</param><summary>There are two overloads for this method.</summary><remarks>These remarks are from the overloads tag on the
            first version.</remarks></member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithExample">
  <summary>
            An override of the method with an example
            </summary>
  <returns>Always returns false</returns>
  <example>
    
            This example is from the base class
            <code>
            // 'x' is always true
            bool x = instance.MethodWithExample();
            </code>
    <p />This example applies to the derived class:
            <code>
            if(derivedInstance.MethodWithExample())
                Console.WriteLine("This is never reached");
            </code></example>
</member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithLotsOfComments(System.Int32)">
  
<summary>
            The method in the base class has lots of comments.
            </summary><remarks>Remarks for the base class</remarks><param name="x">The parameter</param></member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithTwoExamples">
  <summary>
            This only includes one of the examples
            </summary>
  <example>
    <span id="Example 2">
            This is example #2:
            <code>
            // Example #2
            </code></span>
  </example>
</member><member name="M:DocumentationInheritance.DerivedClassWithInheritedDocs.MethodUsingSharedExample">
  <summary>
            This uses a shared example from a base member that is not
            public and this doesn't override.
            </summary>
  <example>
    <span id="Example 2">
            This is example #2:
            <code>
            // Example #2
            </code></span>
  </example>
</member><member name="M:DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"><summary>
                    Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary><param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param><param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param><exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception><exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. 
                </exception><exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or- 
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or- 
                
                    The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. 
                </exception><filterpriority>2</filterpriority></member><member name="P:DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#Count"><summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
                </summary><returns>
                    The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
                </returns><filterpriority>2</filterpriority></member><member name="P:DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#IsSynchronized"><summary>
                    Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
                </summary><returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
                </returns><filterpriority>2</filterpriority></member></members>
</doc>