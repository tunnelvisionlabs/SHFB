<?xml version="1.0" encoding="utf-8"?>
<!-- This file contains a set of configuration settings for the custom build components found in
		 SandcastleBuilder.Components.dll.  The Sandcastle Help File Builder will use this information to merge them
		 with the configuration file at build time and also to allow users to configure them interactively from
		 within the GUI.  The order of the components in this file is not relevant. The Sandcastle Help File Builder
		 supports several replacement tags that can be specified in place of such things as the components folder,
		 the project folder, etc. These will be replaced before use with the physical path associated with the
		 project. -->
<components>
	<!-- The component element defines the ID, the type, and the assembly in which the build component can be
			 found.  Normally, the assembly will be in the same folder as the configuration file which can be specified
			 by using "{@ComponentsFolder}" in the path but this one is part of the help file builder and makes use of
			 the colorizer assembly so it uses "{@SHFBFolder}" instead. -->
	<component id="Code Block Component"
		type="SandcastleBuilder.Components.CodeBlockComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<!-- A brief description of the build component -->
		<description>This build component is used to search for &lt;code&gt; tags within reference XML comments and conceptual content topics and colorize the code within them.  It can also include code from an external file or a region within the file.</description>

		<!-- A list of build components on which this component depends.  If the indicated component does not exist
				 in the project settings or in the configuration file already, it will be added automatically with its
				 default configuration.  This element can be omitted if there are no dependencies. -->
		<!--
		<dependencies>
			<component id="Dependent Component ID 1" />
			<component id="Dependent Component ID 2" />
		</dependencies>
		-->

		<!-- To prevent a component from showing up in the list of selectable components add a "hidden" element like
				 this.  This is useful for preventing edits to components that already appear in the configuration file
				 that you do not want to allow to be edited. -->
		<!-- <hidden /> -->

		<!-- This defines where the component configuration is inserted when placed in the reference build
				 configuration file (sandcastle.config).  The "placement" attribute defines whether it is inserted before
				 or after the indicated component.  The placement attribute can also be set to "start" or "end" to insert
				 the component at the start of the configuration file or at the end.  In those cases, the other
				 attributes can be omitted.  If set to "replace", it will replace the indicated component (a different
				 one identified by the ID or type attribute).  The "id", "type", and "instance" attributes identify the
				 build component for the "before", "after", and "replace" options.  Use "id" for other custom build
				 components with an ID attribute.  Use "type" to identify a stock build component by type name.  The
				 "instance" attribute specifies an optional number that can be used to indicate the instance of the
				 identified component is affected if more than one copy appears in the configuration file.  If not
				 present, the component will not be merged into the reference build configuration file. -->
		<insert placement="before" type="Microsoft.Ddue.Tools.TransformComponent" />

		<!-- This defines where the component configuration is inserted when placed in the conceptual build
				 configuration file (conceptual.config).  The options are the same as those for the  "insert" element
				 above.  If not present, the component will not be merged into the conceptual build configuration file. -->
		<insertConceptual placement="before" type="Microsoft.Ddue.Tools.TransformComponent" />

		<!-- If it has one, this defines the name of the static method within the component that can be called to
				 edit the configuration interactively.  It should accept a string as a parameter that contains the
				 current component configuration and should return a string containing the edited component
				 configuration.  If the build component does not contain a configure method, this element can be omitted
				 and a default editor will be used.  Specify an empty string if the component contains no editable
				 configuration information.-->
		<configureMethod name="ConfigureComponent" />

		<!-- This should contain the default configuration for the build component. -->
		<defaultConfiguration>
			<!-- Base path for relative filenames in source attributes (optional) -->
			<basePath value="{@HtmlEncProjectFolder}" />

			<!-- Base output paths for the files (required).  These should match the parent folder of the output path
					 of the HTML files (see each of the SaveComponent instances in the configuration files). -->
			<outputPaths>
				{@HelpFormatOutputPaths}
			</outputPaths>

			<!-- Allow missing source files (Optional).  If omitted, it will generate errors if referenced source files
				 are missing. -->
			<allowMissingSource value="false" />

			<!-- Remove region markers from imported code blocks.  If omitted, region markers in imported code blocks
					 are left alone. -->
			<removeRegionMarkers value="false" />

			<!-- Code colorizer options (required).
					 Attributes:
							Language syntax configuration file (required)
							XSLT stylesheet file (required)
							CSS stylesheet file (required)
							Script file (required)
							Disabled (optional, leading whitespace normalization only)
							Default language (optional)
							Enable line numbering (optional)
							Enable outlining (optional)
							Keep XML comment "see" tags within the code (optional)
							Tab size override (optional, 0 = Use syntax file setting)
							Use language name as default title (optional) -->
			<colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml" styleFile="{@SHFBFolder}Colorizer\highlight.xsl"
				stylesheet="{@SHFBFolder}Colorizer\highlight.css" scriptFile="{@SHFBFolder}Colorizer\highlight.js"
				disabled="{@DisableCodeBlockComponent}" language="cs" numberLines="false" outlining="false"
				keepSeeTags="false" tabSize="0" defaultTitle="true" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Post-transform Component"
		type="SandcastleBuilder.Components.PostTransformComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is obsolete and will be removed in a future release.</description>

		<insert placement="after" type="Microsoft.Ddue.Tools.TransformComponent" />
		<insertConceptual placement="after" type="Microsoft.Ddue.Tools.TransformComponent" />

		<configureMethod name="ConfigureComponent" />

		<!-- This component is obsolete and will be removed in a future release. -->
		<hidden />

		<defaultConfiguration>
			<outputPaths>
				{@HelpFormatOutputPaths}
			</outputPaths>

			<logoFile filename="" height="0" width="0" altText="" placement="left" alignment="left" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Show Missing Documentation Component" type="SandcastleBuilder.Components.ShowMissingComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This build component is used to add "missing" notes for missing summary, parameter, returns, value, and remarks tags.  It can also add default summary documentation for constructors.</description>

		<insert placement="before" type="Microsoft.Ddue.Tools.TransformComponent" />

		<!-- This component is obsolete and will be removed in a future release. -->
		<hidden />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<defaultConfiguration>
			<!-- All elements are optional. -->

			<!-- Auto-document constructors (true by default) -->
			<AutoDocumentConstructors value="{@AutoDocumentConstructors}" />

			<!-- Auto-document dispose methods (true by default) -->
			<AutoDocumentDisposeMethods value="{@AutoDocumentDisposeMethods}" />

			<!-- Show missing param tags (true by default) -->
			<ShowMissingParams value="{@ShowMissingParams}" />

			<!-- Show missing typeparam tags (true by default) -->
			<ShowMissingTypeParams value="{@ShowMissingTypeParams}" />

			<!-- Show missing remarks tags (false by default) -->
			<ShowMissingRemarks value="{@ShowMissingRemarks}" />

			<!-- Show missing returns tags (true by default) -->
			<ShowMissingReturns value="{@ShowMissingReturns}" />

			<!-- Show missing summary tags (true by default) -->
			<ShowMissingSummaries value="{@ShowMissingSummaries}" />

			<!-- Show missing value tags (false by default) -->
			<ShowMissingValues value="{@ShowMissingValues}" />

			<!-- Show missing namespace comments (true by default) -->
			<ShowMissingNamespaces value="{@ShowMissingNamespaces}" />

			<!-- Show missing include targets (true by default) -->
			<ShowMissingIncludeTargets value="{@ShowMissingIncludeTargets}" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="IntelliSense Component" type="Microsoft.Ddue.Tools.IntelliSenseComponent"
		assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
		<description>This build component is used to extract the XML comments into files that can be used for IntelliSense.  Only the basic set of tags needed for IntelliSense are exported and only for documented API members.</description>

		<!-- It's more useful when used with the Show Missing component but it can be used by itself (see the insert
				 element below). -->
		<dependencies>
			<component id="Show Missing Documentation Component" />
		</dependencies>

		<!-- If not using the Show Missing component, this can be used instead -->
		<!-- insert placement="before" type="Microsoft.Ddue.Tools.TransformComponent" / -->

		<insert placement="after" id="Show Missing Documentation Component" />

		<configureMethod name="ConfigureComponent" />

		<defaultConfiguration>
			<!-- Output options (optional)
					 Attributes:
							Include Namespaces (false by default)
							Namespaces filename ("Namespaces" if not specified or empty)
							Directory (current folder if not specified or empty) -->
			<output includeNamespaces="false" namespacesFile="Namespaces" folder="{@OutputFolder}" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Cached Reflection Index Data"
		type="SandcastleBuilder.Components.CachedCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is obsolete and will be removed in a future release.</description>

		<insert placement="replace" instance="1" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<!-- This component is obsolete and will be removed in a future release. -->
		<hidden />

		<defaultConfiguration>
			<index name="reflection" value="/reflection/apis/api" key="@id" cache="15">
				<cache base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml"
					cacheFile="{@LocalDataFolder}Cache\Reflection.cache"/>
				<data files="reflection.xml" />
			</index>
			<copy name="reflection" source="*" target="/document/reference" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Cached Framework Comments Index Data"
		type="SandcastleBuilder.Components.CachedCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is obsolete and will be removed in a future release.</description>

		<insert placement="replace" instance="3" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<!-- This component is obsolete and will be removed in a future release. -->
		<hidden />

		<defaultConfiguration>
			<index name="comments" value="/doc/members/member" key="@name" cache="30">
				{@CachedFrameworkCommentList}
				{@CommentFileList}
			</index>
			<copy name="comments" source="*" target="/document/comments" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Cached MSDN URL References"
		type="SandcastleBuilder.Components.CachedResolveReferenceLinksComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
		locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
		<description>This component is obsolete and will be removed in a future release.</description>

		<insert placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />
		<insertConceptual placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<!-- This component is obsolete and will be removed in a future release. -->
		<hidden />

		<defaultConfiguration>
			<helpOutput format="HtmlHelp1">
				<cache filename="{@LocalDataFolder}Cache\MsdnUrl.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@HtmlSdkLinkType}" />
				<targets files="reflection.xml" type="Local" />
			</helpOutput>

			<helpOutput format="MSHelp2">
				<cache filename="{@LocalDataFolder}Cache\MsdnUrl.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelp2SdkLinkType}" />
				<targets files="reflection.xml" type="Index" />
			</helpOutput>

			<helpOutput format="MSHelpViewer">
				<cache filename="{@LocalDataFolder}Cache\MsdnUrl.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelpViewerSdkLinkType}" />
				<targets files="reflection.xml" type="Id" />
			</helpOutput>

			<helpOutput format="Website">
				<cache filename="{@LocalDataFolder}Cache\MsdnUrl.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@WebsiteSdkLinkType}" />
				<targets files="reflection.xml" type="Local" />
			</helpOutput>
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Resolve Reference Links (ESENT Cache)"
		type="SandcastleBuilder.Components.ESentResolveReferenceLinksComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
		locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
		<description>This component is used to resolve reference links in topics.  It uses ESENT databases to cache MSDN content IDs and .NET Framework reference link targets.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.  For extremely large projects, it is also possible to cache project reference link data to conserve memory.

The ESENT database engine is part of every version of Microsoft Windows and no set up is required.</description>

		<insert placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />
		<insertConceptual placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />

		<configureMethod name="ConfigureComponent" />

		<defaultConfiguration>
			<helpOutput format="HtmlHelp1">
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache"
					cachePath="{@LocalDataFolder}Cache\ESentMsdnContentIdCache" localCacheSize="2500" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@HtmlSdkLinkType}"
					id="FrameworkTargets" cachePath="{@LocalDataFolder}Cache\ESentFrameworkTargetCache" localCacheSize="2500">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Local" id="ProjectTargets" />
			</helpOutput>

			<helpOutput format="MSHelp2">
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache"
					cachePath="{@LocalDataFolder}Cache\ESentMsdnContentIdCache" localCacheSize="2500" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelp2SdkLinkType}"
					id="FrameworkTargets" cachePath="{@LocalDataFolder}Cache\ESentFrameworkTargetCache" localCacheSize="2500">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Index" id="ProjectTargets" />
			</helpOutput>

			<helpOutput format="MSHelpViewer">
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache"
					cachePath="{@LocalDataFolder}Cache\ESentMsdnContentIdCache" localCacheSize="2500" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelpViewerSdkLinkType}"
					id="FrameworkTargets" cachePath="{@LocalDataFolder}Cache\ESentFrameworkTargetCache" localCacheSize="2500">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Id" id="ProjectTargets" />
			</helpOutput>

			<helpOutput format="Website">
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache"
					cachePath="{@LocalDataFolder}Cache\ESentMsdnContentIdCache" localCacheSize="2500" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@WebsiteSdkLinkType}"
					id="FrameworkTargets" cachePath="{@LocalDataFolder}Cache\ESentFrameworkTargetCache" localCacheSize="2500">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Local" id="ProjectTargets" />
			</helpOutput>
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Reflection Index Data (ESENT Cache)"
		type="SandcastleBuilder.Components.ESentCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is used to index reflection data for copying into topics.  It uses an ESENT database to cache the .NET Framework reflection data.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.   For extremely large projects, it is also possible to cache project reference index data to conserve memory.

The ESENT database engine is part of every version of Microsoft Windows and no set up is required.</description>

		<insert placement="replace" instance="1" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<configureMethod name="ConfigureReflectionIndexCache" />

		<defaultConfiguration>
			<index name="reflection" value="/reflection/apis/api" key="@id" cache="15" localCacheSize="2500"
				frameworkCachePath="{@LocalDataFolder}Cache\ReflectionIndexCache" projectCachePath="">
				<data base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" duplicateWarning="false"
					groupId="ReflectionIndexCache">
					{@ReferenceLinkNamespaceFiles}
				</data>
				<data files="reflection.xml" groupId="Project_Ref_{@UniqueID}" />
			</index>
			<copy name="reflection" source="*" target="/document/reference" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Comments Index Data (ESENT Cache)"
		type="SandcastleBuilder.Components.ESentCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is used to index framework comments for copying into topics.  It uses an ESENT database to cache the .NET Framework comments.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.  For extremely large projects, it is also possible to cache project comments data to conserve memory.

The ESENT database engine is part of every version of Microsoft Windows and no set up is required.
		</description>

		<insert placement="replace" instance="3" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<configureMethod name="ConfigureCommentsIndexCache" />

		<defaultConfiguration>
			<index name="comments" value="/doc/members/member" key="@name" cache="30" localCacheSize="2500"
				frameworkCachePath="{@LocalDataFolder}Cache\CommentsIndexCache" projectCachePath="">
				{@FrameworkCommentList}
				{@CommentFileList}
			</index>
			<copy name="comments" source="*" target="/document/comments" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Resolve Reference Links (SQL Cache)"
		type="SandcastleBuilder.Components.SqlResolveReferenceLinksComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
		locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
		<description>This component is used to resolve reference links in topics.  It uses a Microsoft SQL Server database to cache MSDN content IDs and .NET Framework reference link targets.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.  For extremely large projects, it is also possible to cache project reference link data to conserve memory.

This component requires access to a Microsoft SQL Server instance.  Express and LocalDB versions are supported.  Some initial configuration and set up steps are required.
		</description>

		<insert placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />
		<insertConceptual placement="replace" type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2" />

		<configureMethod name="ConfigureComponent" />

		<defaultConfiguration>
			<helpOutput format="HtmlHelp1">
				<sqlCache connectionString="" msdnLocalCacheSize="2500" frameworkLocalCacheSize="2500"
					projectLocalCacheSize="2500" cacheProject="false" />
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@HtmlSdkLinkType}"
					groupId="FrameworkTargets">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Local" groupId="Project_{@UniqueID}" />
			</helpOutput>

			<helpOutput format="MSHelp2">
				<sqlCache connectionString="" msdnLocalCacheSize="2500" frameworkLocalCacheSize="2500"
					projectLocalCacheSize="2500" cacheProject="false" />
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelp2SdkLinkType}"
					groupId="FrameworkTargets">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Index" groupId="Project_{@UniqueID}" />
			</helpOutput>

			<helpOutput format="MSHelpViewer">
				<sqlCache connectionString="" msdnLocalCacheSize="2500" frameworkLocalCacheSize="2500"
					projectLocalCacheSize="2500" cacheProject="false" />
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelpViewerSdkLinkType}"
					groupId="FrameworkTargets">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Id" groupId="Project_{@UniqueID}" />
			</helpOutput>

			<helpOutput format="Website">
				<sqlCache connectionString="" msdnLocalCacheSize="2500" frameworkLocalCacheSize="2500"
					projectLocalCacheSize="2500" cacheProject="false" />
				<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
				<targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@WebsiteSdkLinkType}"
					groupId="FrameworkTargets">
					{@ReferenceLinkNamespaceFiles}
				</targets>
				<targets files="reflection.xml" type="Local" groupId="Project_{@UniqueID}" />
			</helpOutput>
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Reflection Index Data (SQL Cache)"
		type="SandcastleBuilder.Components.SqlCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is used to index reflection data for copying into topics.  It uses a Microsoft SQL Server database to cache the .NET Framework reflection data.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.  For extremely large projects, it is also possible to cache project reference index data to conserve memory.

This component requires access to a Microsoft SQL Server instance.  Express and LocalDB versions are supported.  Some initial configuration and set up steps are required.</description>

		<insert placement="replace" instance="1" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<configureMethod name="ConfigureComponent" />

		<defaultConfiguration>
			<index name="reflection" value="/reflection/apis/api" key="@id" cache="15" localCacheSize="2500"
				cacheProject="false" connectionString="">
				<data base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" duplicateWarning="false"
					groupId="ReflectionIndexCache">
					{@ReferenceLinkNamespaceFiles}
				</data>
				<data files="reflection.xml" groupId="Project_Ref_{@UniqueID}" />
			</index>
			<copy name="reflection" source="*" target="/document/reference" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="Comments Index Data (SQL Cache)"
		type="SandcastleBuilder.Components.SqlCopyFromIndexComponent"
		assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
		<description>This component is used to index framework comments for copying into topics.  It uses a Microsoft SQL Server database to cache the .NET Framework comments.  This speeds up initialization and conserves memory at the expense of some build time in larger projects.  For extremely large projects, it is also possible to cache project comments data to conserve memory.

This component requires access to a Microsoft SQL Server instance.  Express and LocalDB versions are supported.  Some initial configuration and set up steps are required.</description>

		<insert placement="replace" instance="3" type="Microsoft.Ddue.Tools.CopyFromIndexComponent" />

		<configureMethod name="ConfigureComponent" />

		<defaultConfiguration>
			<index name="comments" value="/doc/members/member" key="@name" cache="30" localCacheSize="2500"
				cacheProject="false" connectionString="">
				{@FrameworkCommentList}
				{@CommentFileList}
			</index>
			<copy name="comments" source="*" target="/document/comments" />
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="MS Help 2 Attributes" type="Microsoft.Ddue.Tools.MSHelpAttrComponent"
		assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
		<description>This build component is used to add additional MS Help 2 attributes to the XML data island in each generated API topic.</description>

		<insert placement="after" type="Microsoft.Ddue.Tools.TransformComponent" />

		<!-- The help file builder project contains properties for this component so we won't show it. -->
		<hidden />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<defaultConfiguration>
			{@HelpAttributes}
		</defaultConfiguration>
	</component>

	<!-- ****************************************************************** -->

	<component id="API Token Resolution" type="Microsoft.Ddue.Tools.SharedContentComponent"
			assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
		<description>This build component is used to resolve tokens in XML comments files.</description>

		<!-- This only applies to API builds. -->
		<insert placement="before" id="Show Missing Documentation Component" />

		<!-- Not editable at all -->
		<configureMethod name="-" />

		<defaultConfiguration>
			{@TokenFiles}
			<replace elements="/*//token" item="string(.)" />
		</defaultConfiguration>
	</component>

	<!-- ******************************************************************

			 Components not defined in this file due to their unique requirements:
					SandcastleBuilder.Components.MultiFormatOutputComponent
	-->

</components>
