<html><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><link rel="shortcut icon" href="../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="../styles/branding.css"><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css"><script type="text/javascript" src="../scripts/branding.js"></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Creating a Syntax Filter Generator Component</title><meta name="Language" content="en-us"><meta name="System.Keywords" content="build components, creating a syntax filter generator"><meta name="System.Keywords" content="build components, syntax generator template class"><meta name="Microsoft.Help.Id" content="5e80d139-811c-48ed-9b52-dcd8a3f5aef3"><meta name="Description" content="Syntax generators are used to add language and usage syntax sections to each API topic for a programming language. They are executed in BuildAssembler as part of the SyntaxComponent."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="'true'"><link type="text/css" rel="stylesheet" href="../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"></script><meta name="SelfBranded" content="true"></head><body onload="onLoad()"><header class="ux-header"><div class="header-top-bar">Sandcastle Help File Builder Documentation</div></header><div class="OH_outerDiv" style="padding: 35px 20px 0 20px;"><div class="OH_leftNav" id="LeftNav">
  <div id="tocnav">
    <div class="toclevel0" data-toclevel="0" style="padding-left: 0px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="bd1ddb51-1c4f-434f-bb1a-ce2135d3a909.htm" title="Sandcastle Help File Builder" tocid="roottoc">Sandcastle Help File Builder</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;" data-childrenloaded="true"><a class="toc_expanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="8dcbb69b-7a1a-4049-8e6b-2bf344efbbc9.htm" title="Custom Build Components" tocid="8dcbb69b-7a1a-4049-8e6b-2bf344efbbc9">Custom Build Components</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="dcc9f938-0d5e-4010-bbfe-fd64168a443b.htm" title="API Token Resolution Component" tocid="dcc9f938-0d5e-4010-bbfe-fd64168a443b">API Token Resolution Component</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="7f03ba39-09f8-4320-bdbd-ed31a3bd885f.htm" title="Code Block Component" tocid="7f03ba39-09f8-4320-bdbd-ed31a3bd885f">Code Block Component</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="5d546511-6aec-455a-ba09-9daffb124c6d.htm" title="IntelliSense Component" tocid="5d546511-6aec-455a-ba09-9daffb124c6d">IntelliSense Component</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="92a6e678-48fb-4e6c-a7e5-34f264b01212.htm" title="Multi-Format Output Component" tocid="92a6e678-48fb-4e6c-a7e5-34f264b01212">Multi-Format Output Component</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="3a1c4bf1-8ecf-4ab3-8010-277bed8d3819.htm" title="Data Caching Build Components" tocid="3a1c4bf1-8ecf-4ab3-8010-277bed8d3819">Data Caching Build Components</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="e6d18448-2459-46f1-bbdc-a7db415f2bda.htm" title="Creating a BuildAssembler Build Component" tocid="e6d18448-2459-46f1-bbdc-a7db415f2bda">Creating a BuildAssembler Build Component</a></div><div class="toclevel2 current" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="5e80d139-811c-48ed-9b52-dcd8a3f5aef3.htm" title="Creating a Syntax Filter Generator Component" tocid="5e80d139-811c-48ed-9b52-dcd8a3f5aef3">Creating a Syntax Filter Generator Component</a></div></div></div><div id="TocResize" class="OH_TocResize"><img id="ResizeImageIncrease" src="../icons/open.gif" onclick="onIncreaseToc()" alt="Expand" title="Expand"><img id="ResizeImageReset" src="../icons/close.gif" style="display:none" onclick="onResetToc()" alt="Minimize" title="Minimize"></div><div class="OH_outerContent" id="OuterContent" style="margin-left: 280px;"><h1 class="title">Creating a Syntax Filter Generator Component</h1><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>Syntax generators are used to add language and usage syntax sections to each API topic for a
programming language.  They are executed in <strong>BuildAssembler</strong> as part of the
<span class="code">SyntaxComponent</span>.  Several default language and usage syntax generators are supplied with
Sandcastle by default.  This topic will walk you through the creation of a syntax generator project used to add a
new language or usage syntax section.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#DefineConfig">Defining the Syntax Generator Configuration</a></li><li class="outlineSectionEntry"><a href="#CreateProject">Creating the Project</a></li><li class="outlineSectionEntry"><a href="#Metadata">The Export Attribute Metadata</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#MetadataId">Id</a></li><li class="outlineSectionEntry"><a href="#MetadataLangName">Language Element Name</a></li><li class="outlineSectionEntry"><a href="#MetadataKeywordStyle">Keyword Style Parameter</a></li><li class="outlineSectionEntry"><a href="#MetadataVersion">Version</a></li><li class="outlineSectionEntry"><a href="#MetadataCopyright">Copyright</a></li><li class="outlineSectionEntry"><a href="#MetadataDescription">Description</a></li><li class="outlineSectionEntry"><a href="#MetadataSortOrder">SortOrder</a></li><li class="outlineSectionEntry"><a href="#MetadataAlternateIds">AlternateIds</a></li><li class="outlineSectionEntry"><a href="#MetadataIsConfigurable">IsConfigurable</a></li><li class="outlineSectionEntry"><a href="#DefaultConfig">DefaultConfiguration</a></li></ul><li class="outlineSectionEntry"><a href="#FactoryClass">The Factory Class</a></li><li class="outlineSectionEntry"><a href="#Template">The Syntax Generator Template Class</a></li></ul></div><a id="DefineConfig"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Defining the Syntax Generator Configuration</div></div><p>The first step is to determine what items will appear in the syntax generator configuration.  The
configuration is stored as an XML fragment in the help file builder project file.  The root node is always
<span class="code">generator</span>.  Define your own elements to contain the syntax generator configuration that
will be nested within the root element.  It is possible that a syntax generator will have no configurable
elements.  In that case, there is nothing to add to the default configuration.  Below is an example of a
configuration that is passed to a syntax generator.</p><div id="ID0EAKAAABAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EAKAAABAA_tabs"><div id="ID0EAKAAABAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">Example Syntax Generator Configuration</a></div></div><div id="ID0EAKAAABAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAKAAABAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAKAAABAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAKAAABAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAKAAABAA','4')" title="Print">Print</a></div></div><div id="ID0EAKAAABAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">generator</span> <span class="highlight-xml-attribute-name">id</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"VisualBasic"</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"VisualBasic"</span><span class="highlight-xml-bracket">&gt;</span> 
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">includeLineContinuation</span> <span class="highlight-xml-attribute-name">value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"false"</span> <span class="highlight-xml-bracket">/&gt;</span> 
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">generator</span><span class="highlight-xml-bracket">&gt;</span></pre></div><div id="ID0EAKAAABAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>&lt;generator id="VisualBasic" name="VisualBasic"&gt; 
    &lt;includeLineContinuation value="false" /&gt; 
&lt;/generator&gt;</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAKAAABAA');</script><a id="CreateProject"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Creating the Project</div></div><p>This section describes how to create and configure the syntax generator project.  It will describe
the process for a C# project but the steps should be fairly similar for a VB.NET project with a few differences
in the configuration option titles.</p><h3 class="procedureSubHeading">Create the Syntax Generator Project</h3><div class="subSection"><ol><li><p>In Visual Studio, select the <span class="ui">New Project</span> option.  In the <span class="ui">New Project</span>
dialog box, select the C# or VB.NET language, and then select the <span class="ui">Documentation</span> subcategory.  Select
the <span class="ui">BuildAssembler Syntax Generator</span> template, give it a name and click <span class="ui">OK</span> to create it.
Once it has been created, right click on the project and select <span class="ui">Properties</span>.</p></li><li><p>In the <span class="ui">Application</span> tab, set the assembly name and default namespace as you see
fit.</p></li><li><p>On the <span class="ui">Debug</span> tab, set the <span class="ui">Start Action</span> to "Start external program" and
enter the path to the <em>BuildAssembler.exe</em> program.  If you installed the help file
builder in the default location, this will be <em>%ProgramFiles(x86)%\EWSoftware\Sandcastle Help File
Builder\</em>.  If not, substitute your path as appropriate.  Set the working directory to the working
folder of a project that contains the build component.  Note that you will need to perform one build of the
project with the <span class="ui">Clean intermediate files</span> option turned off so that you can test the build component
using the temporary build files.</p><div class="alert"><table><tr><th><img src="../icons/alert_note.gif" alt="Tip"> <strong>Tip</strong></th></tr><tr><td><p>Using the BuildAssembler tool as the host is easier than using Visual Studio as the
package locks the assemblies once the help file builder project has loaded them for use and you will not be able
to rebuild them.  Shutting down BuildAssembler frees the assemblies so that you can rebuild them and start a
new debugging session.</p><p>In the help file builder project that you use to test your build component, set the
project's <span class="code">Component Path</span> property to the folder containing your build component's
assembly.  If you have opened the project's <span class="ui">Components</span> property page before setting the component path,
you may need to close and reopen the project in order for it to discover your build component assembly.</p></td></tr></table></div></li><li><p>Optionally, select the <span class="ui">Signing</span> tab and check the "Sign the assembly" checkbox.
Select "&lt;New...&gt;" from the "Choose a strong name key file" dropdown, enter a filename, and click OK to
create the key file.  You can protect the key file with a password if you like or uncheck the option to create
one without a password.</p></li></ol></div><p>You are now ready to edit the syntax generator class itself.  See the comments in the template
class for information on how to get started.  Some general information is given below.  Note that multiple build
components can reside within the same assembly.  Add new class files to the project and implement the necessary
methods as described below and as shown in the template class.</p><p>The syntax generator can be derived from either
<span class="code">Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore</span> which is a simpler
base class suitable for usage syntax generators or from
<span class="code">Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate</span> which is more
suited for language syntax as it contains more methods related to language-specific elements.  A nested Managed
Extensibility Framework (MEF) factory class that describes the component, creates instances, and allows
interaction with the design tools and build engine must also be implemented.  These are described below.  Review
the code for "<span class="code">TODO:</span>" comments to find sections that need attention such as setting the
syntax generator's ID, language name, the default configuration, etc.  If you followed the steps in the
<strong>Creating the Project</strong> section, you can run the project and debug it by setting
breakpoints in the syntax generator's code.  As noted above, set the test project's <span class="code">Component Path</span>
property to the folder containing the syntax generator assembly first.  If necessary, close and reopen the test
project so that it can discover the syntax generator.</p><a id="Metadata"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">The Export Attribute Metadata</div></div><p>The nested factory class is a MEF component.  The <span class="code">SyntaxGeneratorExportAttribute</span>
is used to define the necessary metadata that enables the help file builder to load and use the component.</p><a id="MetadataId"></a><h4 class="subHeading">Id</h4><div class="subsection"><p>The <span class="code">Id</span> parameter is required and is used to uniquely identify the
syntax generator.  Typically, the ID is the language name.</p></div><a id="MetadataLangName"></a><h4 class="subHeading">Language Element Name</h4><div class="subsection"><p>The <span class="code">Language Element Name</span> parameter is required and is used to
uniquely identify the syntax language element generated in each topic by the component.  This value should be
valid as an XML element name.</p></div><a id="MetadataKeywordStyle"></a><h4 class="subHeading">Keyword Style Parameter</h4><div class="subsection"><p>The <span class="code">Keyword Style Parameter</span> parameter is required and is used to get
the keyword style parameter value used by the client side script in the topics for language specific
keyword/separator text.  This will typically be one of the following: <span class="code">cs</span> (C# or
equivalent), <span class="code">vb</span> (VB.NET or equivalent), <span class="code">cpp</span> (C++ or
equivalent), <span class="code">fs</span> (F# or equivalent).  The value <span class="code">cs</span> is typically
used as a default.</p></div><a id="MetadataVersion"></a><h4 class="subHeading">Version</h4><div class="subsection"><p>The <span class="code">Version</span> property is optional and allows you to define the build
component version displayed in the help file builder property page when the syntax generator is selected.</p></div><a id="MetadataCopyright"></a><h4 class="subHeading">Copyright</h4><div class="subsection"><p>The <span class="code">Copyright</span> property is optional and allows you to define the syntax
generator copyright displayed in the help file builder property page when the syntax generator is selected.</p></div><a id="MetadataDescription"></a><h4 class="subHeading">Description</h4><div class="subsection"><p>The <span class="code">Description</span> property is optional and allows you to define the
syntax generator description displayed in the help file builder property page when the syntax generator is
selected.</p></div><a id="MetadataSortOrder"></a><h4 class="subHeading">SortOrder</h4><div class="subsection"><p>The <span class="code">SortOrder</span> property is optional and allows you to define the
sort order of the presentation style when used in conjunction with other syntax generators.  Some presentation
styles will use this sort order to define the order in which the syntax sections are emitted to the topic.</p></div><a id="MetadataAlternateIds"></a><h4 class="subHeading">AlternateIds</h4><div class="subsection"><p>The <span class="code">AlternateIds</span> property is optional and allows you to define a
comma-separated list of other language names that can be mapped to this generator.</p></div><a id="MetadataIsConfigurable"></a><h4 class="subHeading">IsConfigurable</h4><div class="subsection"><p>The <span class="code">IsConfigurable</span> property is optional and allows you to define
whether or not the syntax generator supports interactive editing of its configuration.  If false, the default,
the syntax generator will not be configurable.  If true, the <span class="code">SyntaxComponent</span>'s
configuration editor will allow modifications to the syntax generator configuration.  The
<span class="code">SyntaxComponent</span> must be added to the help file builder project in order to edit the
configuration settings.</p></div><a id="DefaultConfig"></a><h4 class="subHeading">DefaultConfiguration</h4><div class="subsection"><p>The <span class="code">DefaultConfiguration</span> property is optional and is used to specify
the default configuration for a custom syntax generator.  This information is used when the component is selected
for use and the <span class="code">SyntaxComponent</span> does not contain an alternate configuration for it.  You
can use the various replacement tags as attribute values.  These will be replaced at build time with the
appropriate project values.  The default if not overridden is an empty string.</p></div><a id="FactoryClass"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">The Factory Class</div></div><p>The factory class for a syntax generator is quite simple.  It is derived from
<span class="code">Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory</span> and contains a
single abstract <span class="code">Create</span> method that you must implement.  All it has to do is create the
instance of the syntax generator and return it.</p><a id="Template"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">The Syntax Generator Template Class</div></div><p>Syntax generators are more complex than a standard build component and contain several abstract
methods that must be overridden.  They also rely heavily on the reflection information present in each document
to produce the correct syntax.  It is recommended that you take a look at the existing syntax components to see
how they are implemented.  If one represents a language close to the one you are implementing, you can use it as
a starting point.  More information on creating syntax generators will be added at a later date.</p><a name="seeAlsoSection"></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="8dcbb69b-7a1a-4049-8e6b-2bf344efbbc9.htm">Custom Build Components</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://SHFB.CodePlex.com" target="_blank">[v2014.4.21.0] Copyright © 2006-2014, Eric Woodruff, All rights reserved</a></p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle Help File Builder Documentation">Eric Woodruff</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div><script src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript">$(document).ready(function () {DocumentReady();});</script></body></html>