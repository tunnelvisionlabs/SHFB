<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><link rel="SHORTCUT ICON" href="./../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="./../styles/branding.css"><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css"><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>AttachedPropertyComments</title><meta name="Language" content="en-us"><meta name="System.Keywords" content="miscellaneous elements, AttachedPropertyComments"><meta name="Microsoft.Help.Id" content="c0346d23-f376-4948-8f9a-d17b2f1acef3"><meta name="Description" content="This element is used to define the content that should appear on the auto-generated attached property member topic for a given WPF dependency property member."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="'true'"><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css"><link type="text/css" rel="stylesheet" href="./../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true"></head><body onload="onLoad()" class="primary-mtps-offline-document"><header class="ux-header"><div class="header-top-bar">Sandcastle XML Comments Guide</div></header><div class="OH_outerDiv" style="padding: 35px 20px 0 20px;"><div class="OH_leftNav" id="LeftNav">
  <div id="tocnav">
    <div class="toclevel0" data-toclevel="0" style="padding-left: 0px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="4268757F-CE8D-4E6D-8502-4F7F2E22DDA3.htm" title="Sandcastle XML Comments Guide" tocid="roottoc">Sandcastle XML Comments Guide</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;" data-childrenloaded="true"><a class="toc_expanded" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="9341fdc8-1571-405c-8e61-6a6b9b601b46.htm" title="Miscellaneous Elements" tocid="9341fdc8-1571-405c-8e61-6a6b9b601b46">Miscellaneous Elements</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3563f000-5677-4cd9-afd7-4e3f2a7fe4fc.htm" title="AttachedEventComments" tocid="3563f000-5677-4cd9-afd7-4e3f2a7fe4fc">AttachedEventComments</a></div><div class="toclevel2 current" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="c0346d23-f376-4948-8f9a-d17b2f1acef3.htm" title="AttachedPropertyComments" tocid="c0346d23-f376-4948-8f9a-d17b2f1acef3">AttachedPropertyComments</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="6e76ff26-d4f8-491e-ae81-b06086ecf902.htm" title="Code Contract Elements" tocid="6e76ff26-d4f8-491e-ae81-b06086ecf902">Code Contract Elements</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="db2703b4-12bc-4cf5-8642-544b41002809.htm" title="conceptualLink" tocid="db2703b4-12bc-4cf5-8642-544b41002809">conceptualLink</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="a8ade450-e201-401a-923d-1a1169ef7828.htm" title="exclude" tocid="a8ade450-e201-401a-923d-1a1169ef7828">exclude</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="0522f3bf-0a57-4d70-a2a5-d64a14c5bcc9.htm" title="filterpriority" tocid="0522f3bf-0a57-4d70-a2a5-d64a14c5bcc9">filterpriority</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3de64a85-dafb-4a01-85dc-7f69a76ef790.htm" title="include" tocid="3de64a85-dafb-4a01-85dc-7f69a76ef790">include</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="86453FFB-B978-4A2A-9EB5-70E118CA8073.htm" title="inheritdoc" tocid="86453FFB-B978-4A2A-9EB5-70E118CA8073">inheritdoc</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="5b11b235-2b6c-4dfc-86b0-2e7dd98f2716.htm" title="overloads" tocid="5b11b235-2b6c-4dfc-86b0-2e7dd98f2716">overloads</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="8c9273f3-0000-43cd-bb53-932b80855297.htm" title="token" tocid="8c9273f3-0000-43cd-bb53-932b80855297">token</a></div></div></div><div id="TocResize" class="OH_TocResize"><img id="ResizeImageIncrease" src="../icons/open.gif" onclick="onIncreaseToc()" alt="Expand" title="Expand"><img id="ResizeImageReset" src="../icons/close.gif" style="display:none" onclick="onResetToc()" alt="Minimize" title="Minimize"></div><div class="OH_outerContent" id="OuterContent" style="margin-left: 280px;"><h1 class="title">AttachedPropertyComments</h1><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This element is used to define the content that should appear on the auto-generated attached property
member topic for a given WPF dependency property member.</p></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div></div><p>This top-level element is valid on any dependency property member.  The member on which the element
appears should have its own set of member-specific XML comments as well.</p><div id="ID0ECFAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0ECFAAAAA_tabs"><div id="ID0ECFAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">XML</a></div></div><div id="ID0ECFAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECFAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0ECFAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0ECFAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0ECFAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECFAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0ECFAAAAA','4')" title="Print">Print</a></div></div><div id="ID0ECFAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">AttachedPropertyComments</span><span class="highlight-xml-bracket">&gt;</span> 
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">summary</span><span class="highlight-xml-bracket">&gt;</span>
  Summary description
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">summary</span><span class="highlight-xml-bracket">&gt;</span>
  [<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">remarks</span><span class="highlight-xml-bracket">&gt;</span>Optional remarks<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">remarks</span><span class="highlight-xml-bracket">&gt;</span>]
  [<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">example</span><span class="highlight-xml-bracket">&gt;</span>Optional examples<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">example</span><span class="highlight-xml-bracket">&gt;</span>]
  [... other top-level comments elements as needed ...]
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">AttachedPropertyComments</span><span class="highlight-xml-bracket">&gt;</span></pre></div><div id="ID0ECFAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>&lt;AttachedPropertyComments&gt; 
  &lt;summary&gt;
  Summary description
  &lt;/summary&gt;
  [&lt;remarks&gt;Optional remarks&lt;/remarks&gt;]
  [&lt;example&gt;Optional examples&lt;/example&gt;]
  [... other top-level comments elements as needed ...]
&lt;/AttachedPropertyComments&gt;</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECFAAAAA');</script><p>Include any top-level XML comments elements as you would on a standard member.  These elements will
be formatted in an identical fashion and will appear in the auto-generated attached property member topic.</p><div class="alert"><table><tr><th><img class="mtps-img-src" src="./../icons/alert_note.gif" alt="Note"> <strong>Note</strong></th></tr><tr><td>This is a custom XML comments element implemented by the <a class="mtps-external-link" href="http://SHFB.CodePlex.com" target="_blank">Sandcastle Help File Builder</a>.  It will not appear
in the list of valid elements for XML comments IntelliSense.</td></tr></table></div><a id="Remarks"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div></div><p>Because the attached property and attached event members of WPF classes are compiler-generated,
there is no way to associate XML comments with them directly without managing a standalone XML comments file.
While it is possible to do this, it is less convenient than keeping the comments in the code.  The help file
builder provides a solution to this through its <strong>GenerateInheritedDocs</strong> tool.  As part
of the process of generating inherited documentation, the tool will look for attached property and attached event
fields.  If it finds them, it will automatically inherit their comments for the related compiler-generated
members as default comments to prevent a "missing comments" warning.</p><p>In addition, if it finds comments for those field members, it will check for an
<span class="code">AttachedPropertyComments</span> element (for attached properties) or an
<span class="code">AttachedEventComments</span> element (for attached events) and, if found, will use the XML
comments nested within those elements for the related compiler-generated members.  This allows you to provide
comments for the field member and the related compiler-generated member that are entirely different but are
managed from within the code.</p><div class="alert"><table><tr><th><img class="mtps-img-src" src="./../icons/alert_note.gif" alt="Note"> <strong>Note</strong></th></tr><tr><td>Because the attached property and event members are compiler-generated, you must fully qualify
their names if you want to create a link to them with a <span class="code">see</span> element as shown in the
example below.</td></tr></table></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Example</div></div><div id="ID0EACAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EACAAAAA_tabs"><div id="ID0EACAAAAA_tab1" class="codeSnippetContainerTabActive" dir="ltr" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EACAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EACAAAAA_tab2" class="codeSnippetContainerTabPhantom" dir="ltr" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EACAAAAA_tab3" class="codeSnippetContainerTabPhantom" dir="ltr" EnableCopyCode="true" disabled="true"><a>F#</a></div><div id="ID0EACAAAAA_tab4" class="codeSnippetContainerTabPhantom" dir="ltr" EnableCopyCode="true" disabled="true"><a>VB</a></div></div><div id="ID0EACAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-comment">/// This defines the</span> 
<span class="highlight-comment">/// &lt;see cref="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected"/&gt;</span> 
<span class="highlight-comment">/// attached property.</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;AttachedPropertyComments&gt;</span> 
<span class="highlight-comment">/// &lt;summary&gt;This attached property indicates whether or not a tree view item is brought into</span> 
<span class="highlight-comment">/// view when selected.</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;value&gt;The default value is false&lt;/value&gt;</span> 
<span class="highlight-comment">/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt;</span> 
<span class="highlight-comment">/// &lt;/AttachedPropertyComments&gt;</span> 
<span class="highlight-comment">/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt;</span> 
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> DependencyProperty IsBroughtIntoViewWhenSelectedProperty =
    DependencyProperty.RegisterAttached(
    <span class="highlight-literal">"IsBroughtIntoViewWhenSelected"</span>,
    <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">bool</span>),
    <span class="highlight-keyword">typeof</span>(AttachedEventsAndPropertiesTest),
    <span class="highlight-keyword">new</span> UIPropertyMetadata(<span class="highlight-keyword">false</span>, OnIsBroughtIntoViewWhenSelectedChanged));

<span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-comment">/// Get the property value</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt;</span> 
<span class="highlight-comment">/// &lt;returns&gt;The property value&lt;/returns&gt;</span> 
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">bool</span> GetIsBroughtIntoViewWhenSelected(TreeViewItem treeViewItem)
{
    <span class="highlight-keyword">return</span> (<span class="highlight-keyword">bool</span>)treeViewItem.GetValue(IsBroughtIntoViewWhenSelectedProperty);
}

<span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-comment">/// Sets the property value</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt;</span> 
<span class="highlight-comment">/// &lt;param name="value"&gt;The property value&lt;/param&gt;</span> 
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetIsBroughtIntoViewWhenSelected(
  TreeViewItem treeViewItem, <span class="highlight-keyword">bool</span> <span class="highlight-keyword">value</span>)
{
    treeViewItem.SetValue(IsBroughtIntoViewWhenSelectedProperty, <span class="highlight-keyword">value</span>);
}

<span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-comment">/// Connect or disconnect the event handler when the selected state changes</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;param name="depObj"&gt;The dependency object&lt;/param&gt;</span> 
<span class="highlight-comment">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</span> 
<span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> OnIsBroughtIntoViewWhenSelectedChanged(
  DependencyObject depObj, DependencyPropertyChangedEventArgs e)
{
    TreeViewItem item = depObj <span class="highlight-keyword">as</span> TreeViewItem;

    <span class="highlight-keyword">if</span>(item == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span>;

    <span class="highlight-keyword">if</span>(e.NewValue <span class="highlight-keyword">is</span> <span class="highlight-keyword">bool</span> == <span class="highlight-keyword">false</span>)
        <span class="highlight-keyword">return</span>;

    <span class="highlight-keyword">if</span>((<span class="highlight-keyword">bool</span>)e.NewValue)
        item.Selected += OnTreeViewItemSelected;
    <span class="highlight-keyword">else</span>
        item.Selected -= OnTreeViewItemSelected;
}

<span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-comment">/// Bring the item into view</span> 
<span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-comment">/// &lt;param name="sender"&gt;The sender of the event&lt;/param&gt;</span> 
<span class="highlight-comment">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</span> 
<span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> OnTreeViewItemSelected(<span class="highlight-keyword">object</span> sender, RoutedEventArgs e)
{
    <span class="highlight-comment">// Only react to the Selected event raised by the TreeViewItem</span> 
    <span class="highlight-comment">// whose IsSelected property was modified. Ignore all ancestors</span> 
    <span class="highlight-comment">// who are merely reporting that a descendant's Selected fired.</span> 
    <span class="highlight-keyword">if</span>(!Object.ReferenceEquals(sender, e.OriginalSource))
        <span class="highlight-keyword">return</span>;

    TreeViewItem item = e.OriginalSource <span class="highlight-keyword">as</span> TreeViewItem;

    <span class="highlight-keyword">if</span>(item != <span class="highlight-keyword">null</span>)
        item.BringIntoView();
}</pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>/// &lt;summary&gt; 
/// This defines the 
/// &lt;see cref="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected"/&gt; 
/// attached property. 
/// &lt;/summary&gt; 
/// &lt;AttachedPropertyComments&gt; 
/// &lt;summary&gt;This attached property indicates whether or not a tree view item is brought into 
/// view when selected. 
/// &lt;/summary&gt; 
/// &lt;value&gt;The default value is false&lt;/value&gt; 
/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt; 
/// &lt;/AttachedPropertyComments&gt; 
/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt; 
public static readonly DependencyProperty IsBroughtIntoViewWhenSelectedProperty =
    DependencyProperty.RegisterAttached(
    "IsBroughtIntoViewWhenSelected",
    typeof(bool),
    typeof(AttachedEventsAndPropertiesTest),
    new UIPropertyMetadata(false, OnIsBroughtIntoViewWhenSelectedChanged));

/// &lt;summary&gt; 
/// Get the property value 
/// &lt;/summary&gt; 
/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt; 
/// &lt;returns&gt;The property value&lt;/returns&gt; 
public static bool GetIsBroughtIntoViewWhenSelected(TreeViewItem treeViewItem)
{
    return (bool)treeViewItem.GetValue(IsBroughtIntoViewWhenSelectedProperty);
}

/// &lt;summary&gt; 
/// Sets the property value 
/// &lt;/summary&gt; 
/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt; 
/// &lt;param name="value"&gt;The property value&lt;/param&gt; 
public static void SetIsBroughtIntoViewWhenSelected(
  TreeViewItem treeViewItem, bool value)
{
    treeViewItem.SetValue(IsBroughtIntoViewWhenSelectedProperty, value);
}

/// &lt;summary&gt; 
/// Connect or disconnect the event handler when the selected state changes 
/// &lt;/summary&gt; 
/// &lt;param name="depObj"&gt;The dependency object&lt;/param&gt; 
/// &lt;param name="e"&gt;The event arguments&lt;/param&gt; 
static void OnIsBroughtIntoViewWhenSelectedChanged(
  DependencyObject depObj, DependencyPropertyChangedEventArgs e)
{
    TreeViewItem item = depObj as TreeViewItem;

    if(item == null)
        return;

    if(e.NewValue is bool == false)
        return;

    if((bool)e.NewValue)
        item.Selected += OnTreeViewItemSelected;
    else
        item.Selected -= OnTreeViewItemSelected;
}

/// &lt;summary&gt; 
/// Bring the item into view 
/// &lt;/summary&gt; 
/// &lt;param name="sender"&gt;The sender of the event&lt;/param&gt; 
/// &lt;param name="e"&gt;The event arguments&lt;/param&gt; 
static void OnTreeViewItemSelected(object sender, RoutedEventArgs e)
{
    // Only react to the Selected event raised by the TreeViewItem 
    // whose IsSelected property was modified. Ignore all ancestors 
    // who are merely reporting that a descendant's Selected fired. 
    if(!Object.ReferenceEquals(sender, e.OriginalSource))
        return;

    TreeViewItem item = e.OriginalSource as TreeViewItem;

    if(item != null)
        item.BringIntoView();
}</pre></div><div id="ID0EACAAAAA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre></pre></div><div id="ID0EACAAAAA_code_Plain_Div2" class="codeSnippetContainerCode" style="display: none"><pre></pre></div><div id="ID0EACAAAAA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre></pre></div><div id="ID0EACAAAAA_code_Plain_Div3" class="codeSnippetContainerCode" style="display: none"><pre></pre></div><div id="ID0EACAAAAA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre></pre></div><div id="ID0EACAAAAA_code_Plain_Div4" class="codeSnippetContainerCode" style="display: none"><pre></pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div></div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><span sdata="cer" target="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected"><a href="ca2575b2-2ea9-27d4-8c28-8a52b8472762.htm" target="">IsBroughtIntoViewWhenSelected</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="F:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelectedProperty"><a href="b4603b26-6819-f433-915d-552cf3796fd6.htm" target="">IsBroughtIntoViewWhenSelectedProperty</a></span></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="9341fdc8-1571-405c-8e61-6a6b9b601b46.htm" target="">Miscellaneous Elements</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://SHFB.CodePlex.com" target="_blank">[v2014.1.26.1] Sandcastle XML Comments Guide (http://SHFB.CodePlex.com)</a></p><div class="OH_feedbacklink"><a href="mailto:Eric@EWoodruff.us?subject=Sandcastle+XML+Comments+Guide+AttachedPropertyComments+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to Eric@EWoodruff.us.</div></div><script src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript">$(document).ready(function () {DocumentReady();});</script></body></html>