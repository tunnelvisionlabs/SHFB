<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><link rel="SHORTCUT ICON" href="./../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="./../styles/branding.css"><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css"><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>inheritdoc</title><meta name="Language" content="en-us"><meta name="System.Keywords" content="miscellaneous elements, inheritdoc"><meta name="Microsoft.Help.Id" content="86453FFB-B978-4A2A-9EB5-70E118CA8073"><meta name="Description" content="This element can help minimize the effort required to document complex APIs by allowing common documentation to be inherited from base types/members."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="'true'"><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css"><link type="text/css" rel="stylesheet" href="./../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true"></head><body onload="onLoad()" class="primary-mtps-offline-document"><header class="ux-header"><div class="header-top-bar">Sandcastle XML Comments Guide</div></header><div class="OH_outerDiv" style="padding: 35px 20px 0 20px;"><div class="OH_leftNav" id="LeftNav">
  <div id="tocnav">
    <div class="toclevel0" data-toclevel="0" style="padding-left: 0px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="4268757F-CE8D-4E6D-8502-4F7F2E22DDA3.htm" title="Sandcastle XML Comments Guide" tocid="roottoc">Sandcastle XML Comments Guide</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;" data-childrenloaded="true"><a class="toc_expanded" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="9341fdc8-1571-405c-8e61-6a6b9b601b46.htm" title="Miscellaneous Elements" tocid="9341fdc8-1571-405c-8e61-6a6b9b601b46">Miscellaneous Elements</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3563f000-5677-4cd9-afd7-4e3f2a7fe4fc.htm" title="AttachedEventComments" tocid="3563f000-5677-4cd9-afd7-4e3f2a7fe4fc">AttachedEventComments</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="c0346d23-f376-4948-8f9a-d17b2f1acef3.htm" title="AttachedPropertyComments" tocid="c0346d23-f376-4948-8f9a-d17b2f1acef3">AttachedPropertyComments</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="6e76ff26-d4f8-491e-ae81-b06086ecf902.htm" title="Code Contract Elements" tocid="6e76ff26-d4f8-491e-ae81-b06086ecf902">Code Contract Elements</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="db2703b4-12bc-4cf5-8642-544b41002809.htm" title="conceptualLink" tocid="db2703b4-12bc-4cf5-8642-544b41002809">conceptualLink</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="a8ade450-e201-401a-923d-1a1169ef7828.htm" title="exclude" tocid="a8ade450-e201-401a-923d-1a1169ef7828">exclude</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="0522f3bf-0a57-4d70-a2a5-d64a14c5bcc9.htm" title="filterpriority" tocid="0522f3bf-0a57-4d70-a2a5-d64a14c5bcc9">filterpriority</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3de64a85-dafb-4a01-85dc-7f69a76ef790.htm" title="include" tocid="3de64a85-dafb-4a01-85dc-7f69a76ef790">include</a></div><div class="toclevel2 current" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="86453FFB-B978-4A2A-9EB5-70E118CA8073.htm" title="inheritdoc" tocid="86453FFB-B978-4A2A-9EB5-70E118CA8073">inheritdoc</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="5b11b235-2b6c-4dfc-86b0-2e7dd98f2716.htm" title="overloads" tocid="5b11b235-2b6c-4dfc-86b0-2e7dd98f2716">overloads</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="8c9273f3-0000-43cd-bb53-932b80855297.htm" title="token" tocid="8c9273f3-0000-43cd-bb53-932b80855297">token</a></div></div></div><div id="TocResize" class="OH_TocResize"><img id="ResizeImageIncrease" src="../icons/open.gif" onclick="onIncreaseToc()" alt="Expand" title="Expand"><img id="ResizeImageReset" src="../icons/close.gif" style="display:none" onclick="onResetToc()" alt="Minimize" title="Minimize"></div><div class="OH_outerContent" id="OuterContent" style="margin-left: 280px;"><h1 class="title">inheritdoc</h1><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This element can help minimize the effort required to document complex APIs by allowing common
documentation to be inherited from base types/members.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Syntax" target="">Syntax</a></li><li class="outlineSectionEntry"><a href="#TopLevelRules" target="">Top-Level Inheritance Rules</a></li><li class="outlineSectionEntry"><a href="#InlineRules" target="">Inline Inheritance Rules</a></li><li class="outlineSectionEntry"><a href="#IntelliSense" target="">Additional Comment File Sources and IntelliSense</a></li><li class="outlineSectionEntry"><a href="#Examples" target="">Examples</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection" target="">See Also</a></li></ul><div class="alert"><table><tr><th><img class="mtps-img-src" src="./../icons/alert_note.gif" alt="Note"> <strong>Note</strong></th></tr><tr><td>This is a custom XML comments element implemented by Sandcastle and the Sandcastle Help File
Builder.  It will not appear in the list of valid elements for XML comments IntelliSense.</td></tr></table></div></div><a id="Syntax"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div></div><p>Although typically used as a top-level element, it can be used as an inline element as well.  The
use of the element by itself on a member is enough to satisfy the compiler so that it will not issue warnings
about missing comments on public members.  Using it in conjunction with other elements allows you to inherit
common information such as value and parameter descriptions while overriding the inherited documentation for
other elements such as <span class="code">summary</span> and <span class="code">remarks</span>.  Documentation can
be inherited from any member from classes within your own assemblies or from members of other assemblies as well
as the base .NET Framework class library.  The syntax of the element is as follows:</p><div id="ID0EEKAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EEKAAAAA_tabs"><div id="ID0EEKAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">XML</a></div></div><div id="ID0EEKAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EEKAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EEKAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EEKAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EEKAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EEKAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EEKAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EEKAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">inheritdoc</span> [<span class="highlight-xml-attribute-name">cref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"member"</span>] [<span class="highlight-xml-attribute-name">select</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"xpath-filter-expr"</span>] <span class="highlight-xml-bracket">/&gt;</span></pre></div><div id="ID0EEKAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>&lt;inheritdoc [cref="member"] [select="xpath-filter-expr"] /&gt;</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EEKAAAAA');</script><p>The optional <span class="code">cref</span> attribute overrides the standard search method to allow
documentation inheritance from an alternate user-specified member indicated by the <em>member</em>
value.</p><p>The optional <span class="code">select</span> attribute applies the specified XPath filter
expression to the inherited comments.  This is useful if you want to limit the inherited documentation to a
specific subset of elements or just select a particular instance or set of comments.  The expression can be any valid
XPath query that will result in a node set.</p><p>By making use of the <span class="code">cref</span> and <span class="code">select</span> attributes
either by themselves or together, you can fine tune the inheritance of documentation.  You can also nest the
element within other elements to further refine the level of inheritance.</p><p>When using the Sandcastle tools alone, the <span class="code">InheritDocumentationComponent</span>
must be added to the <strong>BuildAssembler</strong> configuration file to handle the
<span class="code">inheritdoc</span> elements.  When using the Sandcastle Help File Builder, its
<strong>GenerateInheritedDocumentation</strong> tool handles the task of generating the inherited
documentation.  The following documentation is based on the Sandcastle Help File Builder's implementation.
The build component works in a similar fashion but does not support all of the scenarios related to merging
and overriding existing elements.</p><a id="TopLevelRules"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Top-Level Inheritance Rules</div></div><p>The <span class="code">inheritdoc</span> element is valid at the root level (i.e. the same level
as <span class="code">summary</span> elements) on types, interfaces, virtual members, interface member
implementations, and constructors.  Its use on any other member type will result in no comments being inherited
unless a <span class="code">cref</span> attribute is specified.  Note that the element is also valid in project
summary and namespace summary comments as long as a <span class="code">cref</span> attribute is specified to
indicate from where to inherit the comments.  When specified at the root level in a set of XML comments, the
documentation search is performed as follows:</p><ul><li>If an explicit <span class="code">cref</span> attribute is specified, the documentation from the
specified namespace/type/member is inherited.  If a <span class="code">cref</span> attribute is not specified, the
following rules apply.</li><li><p>For types and interfaces:</p><ul><li>Inherit documentation from all base classes working backwards up the inheritance chain.</li><li>Inherit documentation from all interface implementations (if any) working through them in
the order listed in the reflection information file (usually alphabetically).</li></ul></li><li><p>For constructors:</p><ul><li>Search backwards up the type inheritance chain for a constructor with a matching signature.</li><li>If a match is found, its documentation is inherited.</li></ul></li><li><p>For virtual members and interface implementations:</p><ul><li>If the member is an override, documentation is inherited from the member it overrides.</li><li>If the member is part of an interface, documentation is inherited from the interface member
being implemented.</li></ul></li><li>Explicit interface implementations will automatically inherit documentation from the interface
member that they implement if no documentation is supplied by the user.  This is done automatically because these
members are by definition private and the compiler will not issue a warning if the user does not supply
documentation.  As such, you can omit the <span class="code">inheritdoc</span> element from them unless you
want to customize the comments.</li><li>With or without an explicit <span class="code">cref</span> attribute, if the inherited
documentation itself contains <span class="code">inheritdoc</span> elements, they will be expanded recursively
working backwards up the inheritance chain.</li><li>In all cases, if a <span class="code">select</span> attribute is present, it is used to filter
the inherited comments based on the specified XPath query.</li></ul><p>When inheriting documentation at the root level, if the following elements already exist in the
member's comments, the inherited versions are ignored:</p><ul><li><span class="code">example</span></li><li><span class="code">exclude</span></li><li><span class="code">filterpriority</span></li><li><span class="code">preliminary</span></li><li><span class="code">summary</span></li><li><span class="code">remarks</span></li><li><span class="code">returns</span></li><li><span class="code">threadsafety</span></li><li><span class="code">value</span></li></ul><p>The <span class="code">overloads</span> element will never be inherited.  This prevents the doubling
of comments on the overloads page.  However, you can inherit the contents of the <span class="code">overloads</span>
element using a <span class="code">select</span> attribute with a value of "<span class="code">overloads/*</span>".
See below for an example.</p><p>All other elements will be inherited unless they match an element by the same name that contains a
<span class="code">cref</span>, <span class="code">href</span>, <span class="code">name</span>,
<span class="code">vref</span>, or <span class="code">xref</span> attribute with an identical value in the member's
comments.  To merge comments in one of the above elements from one or more sources, use one or more nested
<span class="code">inheritdoc</span> elements within the given element.  See below for examples.</p><p>Be aware that when <span class="code">param</span> elements are inherited, the parameter's name
in your class's member must match the base member's parameter name.  If they do not match, you will not see any
inherited documentation for the parameter.  Also, if you supply comments for one parameter but omit comments for
other parameters in order to inherit their documentation from a base implementation, the compiler will issue a
warning.  In this case, you can use a <span class="code">#pragma warning</span> directive to disable the warning
temporarily or add it to the project settings to disable the warning globally.  See below for an example.</p><a id="InlineRules"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inline Inheritance Rules</div></div><p>The <span class="code">inheritdoc</span> element can also be nested within other XML comments
elements such as <span class="code">summary</span>, <span class="code">remarks</span>, <span class="code">example</span>
etc. in order to inherit specific parts of the documentation within those elements.  When nested, the same root
level inheritance rules apply and will be used to locate the first member with comments from which to inherit
documentation.  In addition, a filter will be automatically included based on the parent element or elements
within which the <span class="code">inheritdoc</span> element is nested.  The <span class="code">cref</span> and
<span class="code">select</span> attributes can also be applied to further qualify how the documentation is
inherited.  If you do not want to have the parent elements automatically included in the filter, you must supply
a <span class="code">select</span> attribute with a rooted XPath query that specifies from where to obtain the
comments (i.e. <span class="code">select="/summary/node()"</span>).</p><a id="IntelliSense"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Additional Comment File Sources and IntelliSense</div></div><p>In the Sandcastle Help File Builder, additional sources of inherited documentation (i.e. comments
from third party class libraries) can be added to the <span class="ui">Documentation Sources</span> project node.  This allows
you to inherit documentation from base class libraries without having to add them as documented assemblies in
your project.</p><p>Since the XML comments produced by the compiler are incomplete when using <span class="code">inheritdoc</span>,
it is highly recommended that you make use of the <strong>IntelliSense Build Component</strong> to
produce an IntelliSense XML comments file.  It will include the fully expanded set of inherited documentation so
that Visual Studio can provide useful and accurate API help in the code editor and object browser.</p><a id="Examples"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div></div><p>The following show various examples of using the <span class="code">inheritdoc</span> element.  See
the comments within each for details about what the examples are showing.</p><div id="ID0ECCAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0ECCAAAAA_tabs"><div id="ID0ECCAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">Constructor Documentation Inheritance</a></div></div><div id="ID0ECCAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0ECCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0ECCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0ECCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0ECCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0ECCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0ECCAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// This exception class is thrown by the application if it encounters an</span> 
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// unrecoverable error.</span> 
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt;</span> 
<span class="highlight-spacerShort"></span>[Serializable]
<span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomException : Exception
<span class="highlight-spacerShort"></span>{
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// Default constructor.</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;overloads&gt;There are four overloads for the constructor&lt;/overloads&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> CustomException()
<span class="highlight-spacerShort"></span>    {
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> CustomException(<span class="highlight-keyword">string</span> message) : <span class="highlight-keyword">base</span>(message)
<span class="highlight-spacerShort"></span>    {
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Inherit documentation from the base Exception class matching</span> 
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// this constructor's signature.</span> 
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> CustomException(<span class="highlight-keyword">string</span> message, Exception innerException) :
<span class="highlight-spacerShort"></span>      <span class="highlight-keyword">base</span>(message, innerException)
<span class="highlight-spacerShort"></span>    {
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Inherit documentation from the base Exception class matching</span> 
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// this constructor's signature.</span> 
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-spacerShort"></span>    <span class="highlight-keyword">protected</span> CustomException(SerializationInfo info,
<span class="highlight-spacerShort"></span>      StreamingContext context) : <span class="highlight-keyword">base</span>(info, context)
<span class="highlight-spacerShort"></span>    {
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Inherit documentation from the base Exception class matching</span> 
<span class="highlight-spacerShort"></span>        <span class="highlight-comment">// this constructor's signature.</span> 
<span class="highlight-spacerShort"></span>    }
<span class="highlight-spacerShort"></span>}</pre></div><div id="ID0ECCAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>/// &lt;summary&gt; 
/// This exception class is thrown by the application if it encounters an 
/// unrecoverable error. 
/// &lt;/summary&gt; 
/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt; 
[Serializable]
public class CustomException : Exception
{
    /// &lt;summary&gt; 
    /// Default constructor. 
    /// &lt;/summary&gt; 
    /// &lt;overloads&gt;There are four overloads for the constructor&lt;/overloads&gt; 
    public CustomException()
    {
    }
 
    /// &lt;inheritdoc /&gt; 
    public CustomException(string message) : base(message)
    {
        // Inherit documentation from the base Exception class matching 
        // this constructor's signature. 
    }
 
    /// &lt;inheritdoc /&gt; 
    public CustomException(string message, Exception innerException) :
      base(message, innerException)
    {
        // Inherit documentation from the base Exception class matching 
        // this constructor's signature. 
    }
 
    /// &lt;inheritdoc /&gt; 
    protected CustomException(SerializationInfo info,
      StreamingContext context) : base(info, context)
    {
        // Inherit documentation from the base Exception class matching 
        // this constructor's signature. 
    }
}</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECCAAAAA');</script><div id="ID0EBCAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EBCAAAAA_tabs"><div id="ID0EBCAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">Interface Implementation Examples</a></div></div><div id="ID0EBCAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBCAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-spacer"></span><span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-spacer"></span><span class="highlight-comment">/// A class with an explicit interface implementation</span> 
<span class="highlight-spacer"></span><span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-spacer"></span><span class="highlight-comment">/// &lt;remarks&gt;Note that you must enable the &lt;b&gt;DocumentExplicitInterfaceImplementations&lt;/b&gt;</span> 
<span class="highlight-spacer"></span><span class="highlight-comment">/// SHFB project options in order to see the explicitly implemented members.&lt;/remarks&gt;</span> 
<span class="highlight-spacer"></span><span class="highlight-comment">/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt;</span> 
<span class="highlight-spacer"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExplicitImplementation : ICollection, ICloneable, IEnumerable
<span class="highlight-spacer"></span>{
<span id="hrCol8" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp8', 'hrCol8');">+</span><span class="highlight-collapsed">ICollection Members</span></span><span id="hrExp8" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol8', 'hrExp8');">-</span>    <span class="highlight-preprocessor">#region</span> ICollection Members
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">void</span> ICollection.CopyTo(Array array, <span class="highlight-keyword">int</span> index)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Comments are automatically inherited for explicit</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// interface members with no comments.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">int</span> ICollection.Count
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">get</span> 
<span class="highlight-expanded"> </span>        {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Comments are automatically inherited for explicit</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// interface members with no comments.</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> <span class="highlight-number">0</span>;
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">bool</span> ICollection.IsSynchronized
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">get</span> 
<span class="highlight-expanded"> </span>        {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// Comments are automatically inherited for explicit</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// interface members with no comments.</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;remarks&gt;This is a dummy class and always returns null.&lt;/remarks&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">object</span> ICollection.SyncRoot
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">get</span> 
<span class="highlight-expanded"> </span>        {
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// In this case, we inherit the &lt;summary&gt; and &lt;returns&gt;</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// comments and add a &lt;remarks&gt; comment.  Because we added</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-comment">// comments, we need to specify the &lt;inheritdoc /&gt; tag too.</span> 
<span class="highlight-expanded"> </span>            <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
<span class="highlight-expanded"> </span>        }
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span></span> 
<span class="highlight-spacer"></span> 
<span id="hrCol52" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp52', 'hrCol52');">+</span><span class="highlight-collapsed">IEnumerable Members</span></span><span id="hrExp52" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol52', 'hrExp52');">-</span>    <span class="highlight-preprocessor">#region</span> IEnumerable Members
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;returns&gt;This is a dummy class so it throws an exception&lt;/returns&gt;</span> 
<span class="highlight-expanded"> </span>    IEnumerator IEnumerable.GetEnumerator()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// In this case, we automatically inherit the base interface's</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// &lt;summary&gt; but override the &lt;returns&gt; documentation.  As above,</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// because we specified comments, we have to add the &lt;inheritdoc /&gt;</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// tag too.</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"The method or operation is not implemented."</span>);
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span></span> 
<span class="highlight-spacer"></span> 
<span id="hrCol67" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp67', 'hrCol67');">+</span><span class="highlight-collapsed">ICloneable Members</span></span><span id="hrExp67" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol67', 'hrExp67');">-</span>    <span class="highlight-preprocessor">#region</span> ICloneable Members
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">object</span> Clone()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Not explicitly implemented so we have to tell it to inherit</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// documentation on this one.</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-endblock"> </span>    <span class="highlight-preprocessor">#endregion</span></span> 
<span class="highlight-spacer"></span>}</pre></div><div id="ID0EBCAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>/// &lt;summary&gt; 
/// A class with an explicit interface implementation 
/// &lt;/summary&gt; 
/// &lt;remarks&gt;Note that you must enable the &lt;b&gt;DocumentExplicitInterfaceImplementations&lt;/b&gt; 
/// SHFB project options in order to see the explicitly implemented members.&lt;/remarks&gt; 
/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt; 
public class ExplicitImplementation : ICollection, ICloneable, IEnumerable
{
    #region ICollection Members
  
     void ICollection.CopyTo(Array array, int index)
     {
         // Comments are automatically inherited for explicit 
         // interface members with no comments. 
     }
  
     int ICollection.Count
     {
         get 
         {
             // Comments are automatically inherited for explicit 
             // interface members with no comments. 
             return 0;
         }
     }
  
     bool ICollection.IsSynchronized
     {
         get 
         {
             // Comments are automatically inherited for explicit 
             // interface members with no comments. 
             return true;
  
         }
     }
  
     /// &lt;inheritdoc /&gt; 
     /// &lt;remarks&gt;This is a dummy class and always returns null.&lt;/remarks&gt; 
     object ICollection.SyncRoot
     {
         get 
         {
             // In this case, we inherit the &lt;summary&gt; and &lt;returns&gt; 
             // comments and add a &lt;remarks&gt; comment.  Because we added 
             // comments, we need to specify the &lt;inheritdoc /&gt; tag too. 
             return null;
         }
     }
  
     #endregion 
 
    #region IEnumerable Members
  
     /// &lt;inheritdoc /&gt; 
     /// &lt;returns&gt;This is a dummy class so it throws an exception&lt;/returns&gt; 
     IEnumerator IEnumerable.GetEnumerator()
     {
         // In this case, we automatically inherit the base interface's 
         // &lt;summary&gt; but override the &lt;returns&gt; documentation.  As above, 
         // because we specified comments, we have to add the &lt;inheritdoc /&gt; 
         // tag too. 
         throw new Exception("The method or operation is not implemented.");
     }
  
     #endregion 
 
    #region ICloneable Members
  
     /// &lt;inheritdoc /&gt; 
     public object Clone()
     {
         // Not explicitly implemented so we have to tell it to inherit 
         // documentation on this one. 
         return null;
     }
  
     #endregion 
}</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBCAAAAA');</script><div id="ID0EACAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EACAAAAA_tabs"><div id="ID0EACAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">Various Other Examples</a></div></div><div id="ID0EACAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span id="hrCol0" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp0', 'hrCol0');">+</span><span class="highlight-collapsed">Base class</span></span><span id="hrExp0" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol0', 'hrExp0');">-</span><span class="highlight-preprocessor">#region</span> Base <span class="highlight-keyword">class</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">//=========================================================================</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// A base class from which to inherit documentation</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;remarks&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;para&gt;These remarks are for the base class.&lt;/para&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">///</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;para&gt;This information applies to all classes that derive from</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;see cref="BaseInheritDoc"/&gt;:</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;list type="bullet"&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;item&gt;&lt;description&gt;Point #1.&lt;/description&gt;&lt;/item&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;item&gt;&lt;description&gt;Point #2.&lt;/description&gt;&lt;/item&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;item&gt;&lt;description&gt;Point #3.&lt;/description&gt;&lt;/item&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/list&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/para&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/remarks&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> BaseInheritDoc
<span class="highlight-expanded"> </span>{
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// Constructor</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> BaseInheritDoc()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// The ToString implementation for BaseInheritDoc</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;returns&gt;A string representing the object&lt;/returns&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">base</span>.ToString();
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// Summary for the method with an example</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;returns&gt;True all the time&lt;/returns&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This example is from the base class</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// // 'x' is always true</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// bool x = instance.MethodWithExample();</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">bool</span> MethodWithExample()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// The method in the base class has lots of comments.</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;remarks&gt;Remarks for the base class&lt;/remarks&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;param name="x"&gt;The parameter&lt;/param&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentException"&gt;Thrown if x is zero&lt;/exception&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;exception cref="ArgumentOutOfRangeException"&gt;Thrown if x is</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// less than zero.&lt;/exception&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// /// Example goes here</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;seealso cref="ToString" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;seealso cref="MethodWithExample"/&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> MethodWithLotsOfComments(<span class="highlight-keyword">int</span> x)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// A method with two examples</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;span id="Example 1"&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This is example #1:</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// // Example #1</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/span&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;span id="Example 2"&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This is example #2:</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// // Example #2</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/span&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> MethodWithTwoExamples()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// By using a &lt;span&gt; with an ID, we can group comments for</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// selection by an override in a derived class.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>}
<span class="highlight-endblock"> </span><span class="highlight-preprocessor">#endregion</span></span> 
<span class="highlight-spacer"></span> 
<span id="hrCol97" style="display: none;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrExp97', 'hrCol97');">+</span><span class="highlight-collapsed">Derived class</span></span><span id="hrExp97" style="display: inline;"><span class="highlight-collapsebox" onclick="javascript: HighlightExpandCollapse('hrCol97', 'hrExp97');">-</span><span class="highlight-preprocessor">#region</span> Derived <span class="highlight-keyword">class</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">//=========================================================================</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// This is a derived class with inherited documentation.</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;remarks&gt;This will inherit just the last &amp;lt;para&amp;gt; tag from</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// the base class's &amp;lt;remarks&amp;gt; tag:</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;inheritdoc select="para[last()]" /&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;/remarks&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-comment">/// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt;</span> 
<span class="highlight-expanded"> </span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> DerivedClassWithInheritedDocs : BaseInheritDoc
<span class="highlight-expanded"> </span>{
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// Note in the &lt;remarks&gt; tag above that we can inherit specific</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// parts of a comment tag's text by using an XPath query.  This</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// can allow you to merge comments from various sources into one</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// set of comments in a given tag.  An implied filter that limits</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// the selection to the &lt;remarks&gt; tag is added automatically.  If</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// the select attribute were omitted, the entire set of remarks</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">// from the base class would be inherited.</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc cref="Object.ToString" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// This override ignores the base class comments and uses a</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// cref attribute to obtain the comments from</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// System.Object.ToString instead.</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">base</span>.ToString();
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This overloaded method does something</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;param name="p1"&gt;The string parameter&lt;/param&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;overloads&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;There are three overloads for this method.&lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;remarks&gt;These remarks are from the overloads tag on the</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// first version.&lt;/remarks&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/overloads&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OverloadedMethod(<span class="highlight-keyword">string</span> p1)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-preprocessor">#pragma</span> warning disable <span class="highlight-number">1573</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc cref="OverloadedMethod(string)" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;param name="p2"&gt;The second string parameter&lt;/param&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OverloadedMethod(<span class="highlight-keyword">string</span> p1, <span class="highlight-keyword">string</span> p2)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Inherit documentation from the first overload and add</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// comments for the second parameter.</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Note that because we supplied comments for one parameter</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// but not the other, the compiler will complain.  However,</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// we can shut it up by using a "#pragma warning" directive as</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// shown.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc cref="OverloadedMethod(string)"</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">///     select="param|overloads/*" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;param name="x"&gt;An integer parameter&lt;/param&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OverloadedMethod(<span class="highlight-keyword">string</span> p1, <span class="highlight-keyword">int</span> x)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// This example inherits the comments from the &lt;param&gt; tag on</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// the first version, the content of the &lt;overloads&gt; tag on the</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// first version, and adds comments for the second parameter.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>    <span class="highlight-preprocessor">#pragma</span> warning restore <span class="highlight-number">1573</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// An override of the method with an example</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;returns&gt;Always returns false&lt;/returns&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;p/&gt;This example applies to the derived class:</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// if(derivedInstance.MethodWithExample())</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">///     Console.WriteLine("This is never reached");</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/code&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> MethodWithExample()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// The &lt;example&gt; tag inherits the example from the base class</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// and adds a new example of its own.  Again, an implied filter</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// limits the nested tag to inheriting comments from the</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// &lt;example&gt; tag in the base class's comments.</span> 
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc select="summary|remarks|param" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> MethodWithLotsOfComments(<span class="highlight-keyword">int</span> x)
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// For this override, we don't want all the comments, just those</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// from the &lt;summary&gt;, &lt;remarks&gt;, and &lt;param&gt; tags.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This only includes one of the examples</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc select="span[@id='Example 2']" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> MethodWithTwoExamples()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// Here, we use a filter to select a group of comments in</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// a &lt;span&gt; tag from the base member's &lt;example&gt; tag.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// This uses a shared example from a base member that is not</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// public and this doesn't override.</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/summary&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;inheritdoc cref="MethodWithTwoExamples"</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">///     select="span[@id='Example 2']" /&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-comment">/// &lt;/example&gt;</span> 
<span class="highlight-expanded"> </span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> MethodUsingSharedExample()
<span class="highlight-expanded"> </span>    {
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// This method uses a cref attribute and a select tag to inherit</span> 
<span class="highlight-expanded"> </span>        <span class="highlight-comment">// a specific example from a member to which it has no relation.</span> 
<span class="highlight-expanded"> </span>    }
<span class="highlight-expanded"> </span>}
<span class="highlight-endblock"> </span><span class="highlight-preprocessor">#endregion</span></span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>#region Base class 
 //========================================================================= 
  
 /// &lt;summary&gt; 
 /// A base class from which to inherit documentation 
 /// &lt;/summary&gt; 
 /// &lt;remarks&gt; 
 /// &lt;para&gt;These remarks are for the base class.&lt;/para&gt; 
 /// 
 /// &lt;para&gt;This information applies to all classes that derive from 
 /// &lt;see cref="BaseInheritDoc"/&gt;: 
 /// &lt;list type="bullet"&gt; 
 /// &lt;item&gt;&lt;description&gt;Point #1.&lt;/description&gt;&lt;/item&gt; 
 /// &lt;item&gt;&lt;description&gt;Point #2.&lt;/description&gt;&lt;/item&gt; 
 /// &lt;item&gt;&lt;description&gt;Point #3.&lt;/description&gt;&lt;/item&gt; 
 /// &lt;/list&gt; 
 /// &lt;/para&gt; 
 /// &lt;/remarks&gt; 
 /// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt; 
 public class BaseInheritDoc
 {
     /// &lt;summary&gt; 
     /// Constructor 
     /// &lt;/summary&gt; 
     public BaseInheritDoc()
     {
     }
  
     /// &lt;summary&gt; 
     /// The ToString implementation for BaseInheritDoc 
     /// &lt;/summary&gt; 
     /// &lt;returns&gt;A string representing the object&lt;/returns&gt; 
     public override string ToString()
     {
         return base.ToString();
     }
  
     /// &lt;summary&gt; 
     /// Summary for the method with an example 
     /// &lt;/summary&gt; 
     /// &lt;returns&gt;True all the time&lt;/returns&gt; 
     /// &lt;example&gt; 
     /// This example is from the base class 
     /// &lt;code&gt; 
     /// // 'x' is always true 
     /// bool x = instance.MethodWithExample(); 
     /// &lt;/code&gt; 
     /// &lt;/example&gt; 
     public virtual bool MethodWithExample()
     {
         return true;
     }
  
     /// &lt;summary&gt; 
     /// The method in the base class has lots of comments. 
     /// &lt;/summary&gt; 
     /// &lt;remarks&gt;Remarks for the base class&lt;/remarks&gt; 
     /// &lt;param name="x"&gt;The parameter&lt;/param&gt; 
     /// &lt;exception cref="ArgumentException"&gt;Thrown if x is zero&lt;/exception&gt; 
     /// &lt;exception cref="ArgumentOutOfRangeException"&gt;Thrown if x is 
     /// less than zero.&lt;/exception&gt; 
     /// &lt;example&gt; 
     /// &lt;code&gt; 
     /// /// Example goes here 
     /// &lt;/code&gt; 
     /// &lt;/example&gt; 
     /// &lt;seealso cref="ToString" /&gt; 
     /// &lt;seealso cref="MethodWithExample"/&gt; 
     public virtual void MethodWithLotsOfComments(int x)
     {
     }
  
     /// &lt;summary&gt; 
     /// A method with two examples 
     /// &lt;/summary&gt; 
     /// &lt;example&gt; 
     /// &lt;span id="Example 1"&gt; 
     /// This is example #1: 
     /// &lt;code&gt; 
     /// // Example #1 
     /// &lt;/code&gt; 
     /// &lt;/span&gt; 
     /// &lt;span id="Example 2"&gt; 
     /// This is example #2: 
     /// &lt;code&gt; 
     /// // Example #2 
     /// &lt;/code&gt; 
     /// &lt;/span&gt; 
     /// &lt;/example&gt; 
     protected virtual void MethodWithTwoExamples()
     {
         // By using a &lt;span&gt; with an ID, we can group comments for 
         // selection by an override in a derived class. 
     }
 }
 #endregion 
 
#region Derived class 
 //========================================================================= 
  
 /// &lt;summary&gt; 
 /// This is a derived class with inherited documentation. 
 /// &lt;/summary&gt; 
 /// &lt;remarks&gt;This will inherit just the last &amp;lt;para&amp;gt; tag from 
 /// the base class's &amp;lt;remarks&amp;gt; tag: 
 /// &lt;inheritdoc select="para[last()]" /&gt; 
 /// &lt;/remarks&gt; 
 /// &lt;conceptualLink target="86453FFB-B978-4A2A-9EB5-70E118CA8073" /&gt; 
 public class DerivedClassWithInheritedDocs : BaseInheritDoc
 {
     // Note in the &lt;remarks&gt; tag above that we can inherit specific 
     // parts of a comment tag's text by using an XPath query.  This 
     // can allow you to merge comments from various sources into one 
     // set of comments in a given tag.  An implied filter that limits 
     // the selection to the &lt;remarks&gt; tag is added automatically.  If 
     // the select attribute were omitted, the entire set of remarks 
     // from the base class would be inherited. 
  
     /// &lt;inheritdoc cref="Object.ToString" /&gt; 
     public override string ToString()
     {
         // This override ignores the base class comments and uses a 
         // cref attribute to obtain the comments from 
         // System.Object.ToString instead. 
         return base.ToString();
     }
  
     /// &lt;summary&gt; 
     /// This overloaded method does something 
     /// &lt;/summary&gt; 
     /// &lt;param name="p1"&gt;The string parameter&lt;/param&gt; 
     /// &lt;overloads&gt; 
     /// &lt;summary&gt;There are three overloads for this method.&lt;/summary&gt; 
     /// &lt;remarks&gt;These remarks are from the overloads tag on the 
     /// first version.&lt;/remarks&gt; 
     /// &lt;/overloads&gt; 
     public void OverloadedMethod(string p1)
     {
     }
  
     #pragma warning disable 1573 
     /// &lt;inheritdoc cref="OverloadedMethod(string)" /&gt; 
     /// &lt;param name="p2"&gt;The second string parameter&lt;/param&gt; 
     public void OverloadedMethod(string p1, string p2)
     {
         // Inherit documentation from the first overload and add 
         // comments for the second parameter. 
  
         // Note that because we supplied comments for one parameter 
         // but not the other, the compiler will complain.  However, 
         // we can shut it up by using a "#pragma warning" directive as 
         // shown. 
     }
  
     /// &lt;inheritdoc cref="OverloadedMethod(string)" 
     ///     select="param|overloads/*" /&gt; 
     /// &lt;param name="x"&gt;An integer parameter&lt;/param&gt; 
     public void OverloadedMethod(string p1, int x)
     {
         // This example inherits the comments from the &lt;param&gt; tag on 
         // the first version, the content of the &lt;overloads&gt; tag on the 
         // first version, and adds comments for the second parameter. 
     }
     #pragma warning restore 1573 
  
     /// &lt;summary&gt; 
     /// An override of the method with an example 
     /// &lt;/summary&gt; 
     /// &lt;returns&gt;Always returns false&lt;/returns&gt; 
     /// &lt;example&gt; 
     /// &lt;inheritdoc /&gt; 
     /// &lt;p/&gt;This example applies to the derived class: 
     /// &lt;code&gt; 
     /// if(derivedInstance.MethodWithExample()) 
     ///     Console.WriteLine("This is never reached"); 
     /// &lt;/code&gt; 
     /// &lt;/example&gt; 
     public override bool MethodWithExample()
     {
         // The &lt;example&gt; tag inherits the example from the base class 
         // and adds a new example of its own.  Again, an implied filter 
         // limits the nested tag to inheriting comments from the 
         // &lt;example&gt; tag in the base class's comments. 
  
         return false;
     }
  
     /// &lt;inheritdoc select="summary|remarks|param" /&gt; 
     public override void MethodWithLotsOfComments(int x)
     {
         // For this override, we don't want all the comments, just those 
         // from the &lt;summary&gt;, &lt;remarks&gt;, and &lt;param&gt; tags. 
     }
  
     /// &lt;summary&gt; 
     /// This only includes one of the examples 
     /// &lt;/summary&gt; 
     /// &lt;example&gt; 
     /// &lt;inheritdoc select="span[@id='Example 2']" /&gt; 
     /// &lt;/example&gt; 
     protected override void MethodWithTwoExamples()
     {
         // Here, we use a filter to select a group of comments in 
         // a &lt;span&gt; tag from the base member's &lt;example&gt; tag. 
     }
  
     /// &lt;summary&gt; 
     /// This uses a shared example from a base member that is not 
     /// public and this doesn't override. 
     /// &lt;/summary&gt; 
     /// &lt;example&gt; 
     /// &lt;inheritdoc cref="MethodWithTwoExamples" 
     ///     select="span[@id='Example 2']" /&gt; 
     /// &lt;/example&gt; 
     public void MethodUsingSharedExample()
     {
         // This method uses a cref attribute and a select tag to inherit 
         // a specific example from a member to which it has no relation. 
     }
 }
 #endregion</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div></div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><span sdata="cer" target="T:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc"><a href="00fabdf6-a487-7d2a-02bf-43d70679fe70.htm" target="">BaseInheritDoc</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:XMLCommentsExamples.DocumentationInheritance.CustomException"><a href="152686c0-fa17-60a3-7ee4-6aab5ee53fcf.htm" target="">CustomException</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs"><a href="57dd2fc3-63a7-35d9-fae9-1a2be46ee064.htm" target="">DerivedClassWithInheritedDocs</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation"><a href="0e43b39e-89ee-9bbe-137b-6463720584bc.htm" target="">ExplicitImplementation</a></span></div><div class="seeAlsoStyle"><span sdata="cer" target="T:XMLCommentsExamples.DocumentationInheritance.SetDocumentation"><a href="49e90f9d-a7b0-be7d-d4a5-f16724f15a14.htm" target="">SetDocumentation</a></span></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="9341fdc8-1571-405c-8e61-6a6b9b601b46.htm" target="">Miscellaneous Elements</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="http://SHFB.CodePlex.com" target="_blank">[v2014.1.26.1] Sandcastle XML Comments Guide (http://SHFB.CodePlex.com)</a></p><div class="OH_feedbacklink"><a href="mailto:Eric@EWoodruff.us?subject=Sandcastle+XML+Comments+Guide+inheritdoc+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to Eric@EWoodruff.us.</div></div><script src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript">$(document).ready(function () {DocumentReady();});</script></body></html>